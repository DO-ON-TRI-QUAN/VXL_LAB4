
lab4main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002be0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08002cec  08002cec  00012cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d8c  08002d8c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002d8c  08002d8c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d8c  08002d8c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d8c  08002d8c  00012d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d90  08002d90  00012d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002d94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f0  20000070  08002e04  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000460  08002e04  00020460  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e133  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dd9  00000000  00000000  0002e1cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf0  00000000  00000000  0002ffa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b38  00000000  00000000  00030b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017320  00000000  00000000  000316d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d216  00000000  00000000  000489f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008894d  00000000  00000000  00055c06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000de553  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003538  00000000  00000000  000de5a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002cd4 	.word	0x08002cd4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002cd4 	.word	0x08002cd4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f000 fc22 	bl	80009a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f81e 	bl	80001a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8000168:	f000 f858 	bl	800021c <MX_TIM2_Init>
  MX_GPIO_Init();
 800016c:	f000 f8cc 	bl	8000308 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000170:	f000 f8a0 	bl	80002b4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000174:	4808      	ldr	r0, [pc, #32]	; (8000198 <main+0x3c>)
 8000176:	f001 fb91 	bl	800189c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Init();
 800017a:	f000 f914 	bl	80003a6 <SCH_Init>
  SCH_Add_Task(LED1Blinky, 0, 100);
 800017e:	2264      	movs	r2, #100	; 0x64
 8000180:	2100      	movs	r1, #0
 8000182:	4806      	ldr	r0, [pc, #24]	; (800019c <main+0x40>)
 8000184:	f000 f9f0 	bl	8000568 <SCH_Add_Task>
  SCH_Add_Task(LED2Blinky, 5, 100);
 8000188:	2264      	movs	r2, #100	; 0x64
 800018a:	2105      	movs	r1, #5
 800018c:	4804      	ldr	r0, [pc, #16]	; (80001a0 <main+0x44>)
 800018e:	f000 f9eb 	bl	8000568 <SCH_Add_Task>
  //SCH_Add_Task(LED4Blinky, 15, 100);
  //SCH_Add_Task(LED5Blinky, 20, 100);

  while (1)
  {
	  SCH_Dispatch_Task();
 8000192:	f000 f99d 	bl	80004d0 <SCH_Dispatch_Task>
 8000196:	e7fc      	b.n	8000192 <main+0x36>
 8000198:	20000400 	.word	0x20000400
 800019c:	080008c5 	.word	0x080008c5
 80001a0:	08000911 	.word	0x08000911

080001a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b090      	sub	sp, #64	; 0x40
 80001a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001aa:	f107 0318 	add.w	r3, r7, #24
 80001ae:	2228      	movs	r2, #40	; 0x28
 80001b0:	2100      	movs	r1, #0
 80001b2:	4618      	mov	r0, r3
 80001b4:	f002 f94c 	bl	8002450 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001b8:	1d3b      	adds	r3, r7, #4
 80001ba:	2200      	movs	r2, #0
 80001bc:	601a      	str	r2, [r3, #0]
 80001be:	605a      	str	r2, [r3, #4]
 80001c0:	609a      	str	r2, [r3, #8]
 80001c2:	60da      	str	r2, [r3, #12]
 80001c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001c6:	2302      	movs	r3, #2
 80001c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ca:	2301      	movs	r3, #1
 80001cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ce:	2310      	movs	r3, #16
 80001d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001d2:	2300      	movs	r3, #0
 80001d4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001d6:	f107 0318 	add.w	r3, r7, #24
 80001da:	4618      	mov	r0, r3
 80001dc:	f000 ff00 	bl	8000fe0 <HAL_RCC_OscConfig>
 80001e0:	4603      	mov	r3, r0
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d001      	beq.n	80001ea <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001e6:	f000 f8d9 	bl	800039c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ea:	230f      	movs	r3, #15
 80001ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001ee:	2300      	movs	r3, #0
 80001f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f2:	2300      	movs	r3, #0
 80001f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001f6:	2300      	movs	r3, #0
 80001f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001fa:	2300      	movs	r3, #0
 80001fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001fe:	1d3b      	adds	r3, r7, #4
 8000200:	2100      	movs	r1, #0
 8000202:	4618      	mov	r0, r3
 8000204:	f001 f96c 	bl	80014e0 <HAL_RCC_ClockConfig>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d001      	beq.n	8000212 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800020e:	f000 f8c5 	bl	800039c <Error_Handler>
  }
}
 8000212:	bf00      	nop
 8000214:	3740      	adds	r7, #64	; 0x40
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
	...

0800021c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b086      	sub	sp, #24
 8000220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000222:	f107 0308 	add.w	r3, r7, #8
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
 800022a:	605a      	str	r2, [r3, #4]
 800022c:	609a      	str	r2, [r3, #8]
 800022e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000230:	463b      	mov	r3, r7
 8000232:	2200      	movs	r2, #0
 8000234:	601a      	str	r2, [r3, #0]
 8000236:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000238:	4b1d      	ldr	r3, [pc, #116]	; (80002b0 <MX_TIM2_Init+0x94>)
 800023a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800023e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000240:	4b1b      	ldr	r3, [pc, #108]	; (80002b0 <MX_TIM2_Init+0x94>)
 8000242:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000246:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000248:	4b19      	ldr	r3, [pc, #100]	; (80002b0 <MX_TIM2_Init+0x94>)
 800024a:	2200      	movs	r2, #0
 800024c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800024e:	4b18      	ldr	r3, [pc, #96]	; (80002b0 <MX_TIM2_Init+0x94>)
 8000250:	2209      	movs	r2, #9
 8000252:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000254:	4b16      	ldr	r3, [pc, #88]	; (80002b0 <MX_TIM2_Init+0x94>)
 8000256:	2200      	movs	r2, #0
 8000258:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800025a:	4b15      	ldr	r3, [pc, #84]	; (80002b0 <MX_TIM2_Init+0x94>)
 800025c:	2200      	movs	r2, #0
 800025e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000260:	4813      	ldr	r0, [pc, #76]	; (80002b0 <MX_TIM2_Init+0x94>)
 8000262:	f001 facb 	bl	80017fc <HAL_TIM_Base_Init>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d001      	beq.n	8000270 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800026c:	f000 f896 	bl	800039c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000270:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000274:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000276:	f107 0308 	add.w	r3, r7, #8
 800027a:	4619      	mov	r1, r3
 800027c:	480c      	ldr	r0, [pc, #48]	; (80002b0 <MX_TIM2_Init+0x94>)
 800027e:	f001 fc49 	bl	8001b14 <HAL_TIM_ConfigClockSource>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000288:	f000 f888 	bl	800039c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800028c:	2300      	movs	r3, #0
 800028e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000290:	2300      	movs	r3, #0
 8000292:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000294:	463b      	mov	r3, r7
 8000296:	4619      	mov	r1, r3
 8000298:	4805      	ldr	r0, [pc, #20]	; (80002b0 <MX_TIM2_Init+0x94>)
 800029a:	f001 fe21 	bl	8001ee0 <HAL_TIMEx_MasterConfigSynchronization>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80002a4:	f000 f87a 	bl	800039c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80002a8:	bf00      	nop
 80002aa:	3718      	adds	r7, #24
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20000400 	.word	0x20000400

080002b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002b8:	4b11      	ldr	r3, [pc, #68]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002ba:	4a12      	ldr	r2, [pc, #72]	; (8000304 <MX_USART1_UART_Init+0x50>)
 80002bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002be:	4b10      	ldr	r3, [pc, #64]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002c6:	4b0e      	ldr	r3, [pc, #56]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002cc:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002d2:	4b0b      	ldr	r3, [pc, #44]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002d8:	4b09      	ldr	r3, [pc, #36]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002da:	220c      	movs	r2, #12
 80002dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002de:	4b08      	ldr	r3, [pc, #32]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002e4:	4b06      	ldr	r3, [pc, #24]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002ea:	4805      	ldr	r0, [pc, #20]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002ec:	f001 fe62 	bl	8001fb4 <HAL_UART_Init>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002f6:	f000 f851 	bl	800039c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002fa:	bf00      	nop
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	200003b8 	.word	0x200003b8
 8000304:	40013800 	.word	0x40013800

08000308 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b086      	sub	sp, #24
 800030c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800030e:	f107 0308 	add.w	r3, r7, #8
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	605a      	str	r2, [r3, #4]
 8000318:	609a      	str	r2, [r3, #8]
 800031a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800031c:	4b18      	ldr	r3, [pc, #96]	; (8000380 <MX_GPIO_Init+0x78>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	4a17      	ldr	r2, [pc, #92]	; (8000380 <MX_GPIO_Init+0x78>)
 8000322:	f043 0304 	orr.w	r3, r3, #4
 8000326:	6193      	str	r3, [r2, #24]
 8000328:	4b15      	ldr	r3, [pc, #84]	; (8000380 <MX_GPIO_Init+0x78>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	f003 0304 	and.w	r3, r3, #4
 8000330:	607b      	str	r3, [r7, #4]
 8000332:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000334:	4b12      	ldr	r3, [pc, #72]	; (8000380 <MX_GPIO_Init+0x78>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	4a11      	ldr	r2, [pc, #68]	; (8000380 <MX_GPIO_Init+0x78>)
 800033a:	f043 0308 	orr.w	r3, r3, #8
 800033e:	6193      	str	r3, [r2, #24]
 8000340:	4b0f      	ldr	r3, [pc, #60]	; (8000380 <MX_GPIO_Init+0x78>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	f003 0308 	and.w	r3, r3, #8
 8000348:	603b      	str	r3, [r7, #0]
 800034a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 800034c:	2200      	movs	r2, #0
 800034e:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8000352:	480c      	ldr	r0, [pc, #48]	; (8000384 <MX_GPIO_Init+0x7c>)
 8000354:	f000 fe12 	bl	8000f7c <HAL_GPIO_WritePin>
                          |LED5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           LED5_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8000358:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 800035c:	60bb      	str	r3, [r7, #8]
                          |LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800035e:	2301      	movs	r3, #1
 8000360:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000362:	2300      	movs	r3, #0
 8000364:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000366:	2302      	movs	r3, #2
 8000368:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800036a:	f107 0308 	add.w	r3, r7, #8
 800036e:	4619      	mov	r1, r3
 8000370:	4804      	ldr	r0, [pc, #16]	; (8000384 <MX_GPIO_Init+0x7c>)
 8000372:	f000 fc89 	bl	8000c88 <HAL_GPIO_Init>

}
 8000376:	bf00      	nop
 8000378:	3718      	adds	r7, #24
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	40021000 	.word	0x40021000
 8000384:	40010800 	.word	0x40010800

08000388 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
	//currentTime = HAL_GetTick();
    SCH_Update();
 8000390:	f000 f81e 	bl	80003d0 <SCH_Update>
}
 8000394:	bf00      	nop
 8000396:	3708      	adds	r7, #8
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}

0800039c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003a0:	b672      	cpsid	i
}
 80003a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003a4:	e7fe      	b.n	80003a4 <Error_Handler+0x8>

080003a6 <SCH_Init>:
 */

#include "scheduler.h"
#include "task.h"

void SCH_Init(void) {
 80003a6:	b580      	push	{r7, lr}
 80003a8:	b082      	sub	sp, #8
 80003aa:	af00      	add	r7, sp, #0
	unsigned char i;
	for (i = 0 ; i < SCH_MAX_TASKS; i++) {
 80003ac:	2300      	movs	r3, #0
 80003ae:	71fb      	strb	r3, [r7, #7]
 80003b0:	e006      	b.n	80003c0 <SCH_Init+0x1a>
		 SCH_Delete_Task(i);
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 f925 	bl	8000604 <SCH_Delete_Task>
	for (i = 0 ; i < SCH_MAX_TASKS; i++) {
 80003ba:	79fb      	ldrb	r3, [r7, #7]
 80003bc:	3301      	adds	r3, #1
 80003be:	71fb      	strb	r3, [r7, #7]
 80003c0:	79fb      	ldrb	r3, [r7, #7]
 80003c2:	2b27      	cmp	r3, #39	; 0x27
 80003c4:	d9f5      	bls.n	80003b2 <SCH_Init+0xc>
	}
}
 80003c6:	bf00      	nop
 80003c8:	bf00      	nop
 80003ca:	3708      	adds	r7, #8
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}

080003d0 <SCH_Update>:

void SCH_Update(void) {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
	unsigned char Index;

	// NOTE: calculations are in *TICKS* (not milliseconds)
    for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 80003d6:	2300      	movs	r3, #0
 80003d8:	71fb      	strb	r3, [r7, #7]
 80003da:	e05d      	b.n	8000498 <SCH_Update+0xc8>
	    // Check if there is a task at this location
	     if (SCH_tasks_G[Index].pTask){
 80003dc:	79fa      	ldrb	r2, [r7, #7]
 80003de:	4939      	ldr	r1, [pc, #228]	; (80004c4 <SCH_Update+0xf4>)
 80003e0:	4613      	mov	r3, r2
 80003e2:	009b      	lsls	r3, r3, #2
 80003e4:	4413      	add	r3, r2
 80003e6:	009b      	lsls	r3, r3, #2
 80003e8:	440b      	add	r3, r1
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d050      	beq.n	8000492 <SCH_Update+0xc2>
	         if (SCH_tasks_G[Index].Delay == 0) {
 80003f0:	79fa      	ldrb	r2, [r7, #7]
 80003f2:	4934      	ldr	r1, [pc, #208]	; (80004c4 <SCH_Update+0xf4>)
 80003f4:	4613      	mov	r3, r2
 80003f6:	009b      	lsls	r3, r3, #2
 80003f8:	4413      	add	r3, r2
 80003fa:	009b      	lsls	r3, r3, #2
 80003fc:	440b      	add	r3, r1
 80003fe:	3304      	adds	r3, #4
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d132      	bne.n	800046c <SCH_Update+0x9c>
	             // The task is due to run
	             // Inc. the 'RunMe' flag
	             SCH_tasks_G[Index].RunMe += 1;
 8000406:	79fa      	ldrb	r2, [r7, #7]
 8000408:	492e      	ldr	r1, [pc, #184]	; (80004c4 <SCH_Update+0xf4>)
 800040a:	4613      	mov	r3, r2
 800040c:	009b      	lsls	r3, r3, #2
 800040e:	4413      	add	r3, r2
 8000410:	009b      	lsls	r3, r3, #2
 8000412:	440b      	add	r3, r1
 8000414:	330c      	adds	r3, #12
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	79fa      	ldrb	r2, [r7, #7]
 800041a:	3301      	adds	r3, #1
 800041c:	b2d8      	uxtb	r0, r3
 800041e:	4929      	ldr	r1, [pc, #164]	; (80004c4 <SCH_Update+0xf4>)
 8000420:	4613      	mov	r3, r2
 8000422:	009b      	lsls	r3, r3, #2
 8000424:	4413      	add	r3, r2
 8000426:	009b      	lsls	r3, r3, #2
 8000428:	440b      	add	r3, r1
 800042a:	330c      	adds	r3, #12
 800042c:	4602      	mov	r2, r0
 800042e:	701a      	strb	r2, [r3, #0]
	             if (SCH_tasks_G[Index].Period) {
 8000430:	79fa      	ldrb	r2, [r7, #7]
 8000432:	4924      	ldr	r1, [pc, #144]	; (80004c4 <SCH_Update+0xf4>)
 8000434:	4613      	mov	r3, r2
 8000436:	009b      	lsls	r3, r3, #2
 8000438:	4413      	add	r3, r2
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	440b      	add	r3, r1
 800043e:	3308      	adds	r3, #8
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d025      	beq.n	8000492 <SCH_Update+0xc2>
	            	 // Schedule periodic tasks to run again
	            	 SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
 8000446:	79f9      	ldrb	r1, [r7, #7]
 8000448:	79fa      	ldrb	r2, [r7, #7]
 800044a:	481e      	ldr	r0, [pc, #120]	; (80004c4 <SCH_Update+0xf4>)
 800044c:	460b      	mov	r3, r1
 800044e:	009b      	lsls	r3, r3, #2
 8000450:	440b      	add	r3, r1
 8000452:	009b      	lsls	r3, r3, #2
 8000454:	4403      	add	r3, r0
 8000456:	3308      	adds	r3, #8
 8000458:	6819      	ldr	r1, [r3, #0]
 800045a:	481a      	ldr	r0, [pc, #104]	; (80004c4 <SCH_Update+0xf4>)
 800045c:	4613      	mov	r3, r2
 800045e:	009b      	lsls	r3, r3, #2
 8000460:	4413      	add	r3, r2
 8000462:	009b      	lsls	r3, r3, #2
 8000464:	4403      	add	r3, r0
 8000466:	3304      	adds	r3, #4
 8000468:	6019      	str	r1, [r3, #0]
 800046a:	e012      	b.n	8000492 <SCH_Update+0xc2>
	             }
	         } else {
	        	 // Not yet ready to run: just decrement the delay
	        	 SCH_tasks_G[Index].Delay -= 1;
 800046c:	79fa      	ldrb	r2, [r7, #7]
 800046e:	4915      	ldr	r1, [pc, #84]	; (80004c4 <SCH_Update+0xf4>)
 8000470:	4613      	mov	r3, r2
 8000472:	009b      	lsls	r3, r3, #2
 8000474:	4413      	add	r3, r2
 8000476:	009b      	lsls	r3, r3, #2
 8000478:	440b      	add	r3, r1
 800047a:	3304      	adds	r3, #4
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	79fa      	ldrb	r2, [r7, #7]
 8000480:	1e59      	subs	r1, r3, #1
 8000482:	4810      	ldr	r0, [pc, #64]	; (80004c4 <SCH_Update+0xf4>)
 8000484:	4613      	mov	r3, r2
 8000486:	009b      	lsls	r3, r3, #2
 8000488:	4413      	add	r3, r2
 800048a:	009b      	lsls	r3, r3, #2
 800048c:	4403      	add	r3, r0
 800048e:	3304      	adds	r3, #4
 8000490:	6019      	str	r1, [r3, #0]
    for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8000492:	79fb      	ldrb	r3, [r7, #7]
 8000494:	3301      	adds	r3, #1
 8000496:	71fb      	strb	r3, [r7, #7]
 8000498:	79fb      	ldrb	r3, [r7, #7]
 800049a:	2b27      	cmp	r3, #39	; 0x27
 800049c:	d99e      	bls.n	80003dc <SCH_Update+0xc>
	         }
	     }
	}

    currentTime = HAL_GetTick() / 10 * 10;
 800049e:	f000 fadb 	bl	8000a58 <HAL_GetTick>
 80004a2:	4603      	mov	r3, r0
 80004a4:	4a08      	ldr	r2, [pc, #32]	; (80004c8 <SCH_Update+0xf8>)
 80004a6:	fba2 2303 	umull	r2, r3, r2, r3
 80004aa:	08da      	lsrs	r2, r3, #3
 80004ac:	4613      	mov	r3, r2
 80004ae:	009b      	lsls	r3, r3, #2
 80004b0:	4413      	add	r3, r2
 80004b2:	005b      	lsls	r3, r3, #1
 80004b4:	461a      	mov	r2, r3
 80004b6:	4b05      	ldr	r3, [pc, #20]	; (80004cc <SCH_Update+0xfc>)
 80004b8:	601a      	str	r2, [r3, #0]
}
 80004ba:	bf00      	nop
 80004bc:	3708      	adds	r7, #8
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	20000098 	.word	0x20000098
 80004c8:	cccccccd 	.word	0xcccccccd
 80004cc:	20000448 	.word	0x20000448

080004d0 <SCH_Dispatch_Task>:

void SCH_Dispatch_Task(void) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
    unsigned char Index;
    // Dispatches (runs) the next task (if one is ready)
    for (Index = 0; Index < SCH_MAX_TASKS; Index++){
 80004d6:	2300      	movs	r3, #0
 80004d8:	71fb      	strb	r3, [r7, #7]
 80004da:	e03a      	b.n	8000552 <SCH_Dispatch_Task+0x82>
	   	 if (SCH_tasks_G[Index].RunMe > 0) {
 80004dc:	79fa      	ldrb	r2, [r7, #7]
 80004de:	4921      	ldr	r1, [pc, #132]	; (8000564 <SCH_Dispatch_Task+0x94>)
 80004e0:	4613      	mov	r3, r2
 80004e2:	009b      	lsls	r3, r3, #2
 80004e4:	4413      	add	r3, r2
 80004e6:	009b      	lsls	r3, r3, #2
 80004e8:	440b      	add	r3, r1
 80004ea:	330c      	adds	r3, #12
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d02c      	beq.n	800054c <SCH_Dispatch_Task+0x7c>
	   		 (*SCH_tasks_G[Index].pTask)(); // Run the task
 80004f2:	79fa      	ldrb	r2, [r7, #7]
 80004f4:	491b      	ldr	r1, [pc, #108]	; (8000564 <SCH_Dispatch_Task+0x94>)
 80004f6:	4613      	mov	r3, r2
 80004f8:	009b      	lsls	r3, r3, #2
 80004fa:	4413      	add	r3, r2
 80004fc:	009b      	lsls	r3, r3, #2
 80004fe:	440b      	add	r3, r1
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4798      	blx	r3
 	         SCH_tasks_G[Index].RunMe -= 1; // Reset / reduce RunMe flag
 8000504:	79fa      	ldrb	r2, [r7, #7]
 8000506:	4917      	ldr	r1, [pc, #92]	; (8000564 <SCH_Dispatch_Task+0x94>)
 8000508:	4613      	mov	r3, r2
 800050a:	009b      	lsls	r3, r3, #2
 800050c:	4413      	add	r3, r2
 800050e:	009b      	lsls	r3, r3, #2
 8000510:	440b      	add	r3, r1
 8000512:	330c      	adds	r3, #12
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	79fa      	ldrb	r2, [r7, #7]
 8000518:	3b01      	subs	r3, #1
 800051a:	b2d8      	uxtb	r0, r3
 800051c:	4911      	ldr	r1, [pc, #68]	; (8000564 <SCH_Dispatch_Task+0x94>)
 800051e:	4613      	mov	r3, r2
 8000520:	009b      	lsls	r3, r3, #2
 8000522:	4413      	add	r3, r2
 8000524:	009b      	lsls	r3, r3, #2
 8000526:	440b      	add	r3, r1
 8000528:	330c      	adds	r3, #12
 800052a:	4602      	mov	r2, r0
 800052c:	701a      	strb	r2, [r3, #0]
 	         // Periodic tasks will automatically run again
 	         // - if this is a 'one shot' task, remove it from the array
 	         if (SCH_tasks_G[Index].Period == 0) {
 800052e:	79fa      	ldrb	r2, [r7, #7]
 8000530:	490c      	ldr	r1, [pc, #48]	; (8000564 <SCH_Dispatch_Task+0x94>)
 8000532:	4613      	mov	r3, r2
 8000534:	009b      	lsls	r3, r3, #2
 8000536:	4413      	add	r3, r2
 8000538:	009b      	lsls	r3, r3, #2
 800053a:	440b      	add	r3, r1
 800053c:	3308      	adds	r3, #8
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d103      	bne.n	800054c <SCH_Dispatch_Task+0x7c>
 	        	 SCH_Delete_Task(Index);
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	4618      	mov	r0, r3
 8000548:	f000 f85c 	bl	8000604 <SCH_Delete_Task>
    for (Index = 0; Index < SCH_MAX_TASKS; Index++){
 800054c:	79fb      	ldrb	r3, [r7, #7]
 800054e:	3301      	adds	r3, #1
 8000550:	71fb      	strb	r3, [r7, #7]
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	2b27      	cmp	r3, #39	; 0x27
 8000556:	d9c1      	bls.n	80004dc <SCH_Dispatch_Task+0xc>
    }
    // Report system status
    //SCH_Report_Status();
    // The scheduler enters idle mode at this point
    //SCH_Go_To_Sleep();
}
 8000558:	bf00      	nop
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20000098 	.word	0x20000098

08000568 <SCH_Add_Task>:

unsigned char SCH_Add_Task(void (* pFunction)(), unsigned int DELAY, unsigned int PERIOD) {
 8000568:	b480      	push	{r7}
 800056a:	b087      	sub	sp, #28
 800056c:	af00      	add	r7, sp, #0
 800056e:	60f8      	str	r0, [r7, #12]
 8000570:	60b9      	str	r1, [r7, #8]
 8000572:	607a      	str	r2, [r7, #4]
    unsigned char Index = 0;
 8000574:	2300      	movs	r3, #0
 8000576:	75fb      	strb	r3, [r7, #23]

    // First find a gap in the array (if there is one)
    while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS)) {
 8000578:	e002      	b.n	8000580 <SCH_Add_Task+0x18>
       Index++;
 800057a:	7dfb      	ldrb	r3, [r7, #23]
 800057c:	3301      	adds	r3, #1
 800057e:	75fb      	strb	r3, [r7, #23]
    while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS)) {
 8000580:	7dfa      	ldrb	r2, [r7, #23]
 8000582:	491f      	ldr	r1, [pc, #124]	; (8000600 <SCH_Add_Task+0x98>)
 8000584:	4613      	mov	r3, r2
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	4413      	add	r3, r2
 800058a:	009b      	lsls	r3, r3, #2
 800058c:	440b      	add	r3, r1
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d002      	beq.n	800059a <SCH_Add_Task+0x32>
 8000594:	7dfb      	ldrb	r3, [r7, #23]
 8000596:	2b27      	cmp	r3, #39	; 0x27
 8000598:	d9ef      	bls.n	800057a <SCH_Add_Task+0x12>
    }
    // Have we reached the end of the list?
    if (Index == SCH_MAX_TASKS) {
 800059a:	7dfb      	ldrb	r3, [r7, #23]
 800059c:	2b28      	cmp	r3, #40	; 0x28
 800059e:	d101      	bne.n	80005a4 <SCH_Add_Task+0x3c>
        // Task list is full
        // Set the global error variable
        //Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
        // Also return an error code
        return SCH_MAX_TASKS;
 80005a0:	2328      	movs	r3, #40	; 0x28
 80005a2:	e027      	b.n	80005f4 <SCH_Add_Task+0x8c>
    }

    // If we're here, there is a space in the task array
    SCH_tasks_G[Index].pTask = pFunction;
 80005a4:	7dfa      	ldrb	r2, [r7, #23]
 80005a6:	4916      	ldr	r1, [pc, #88]	; (8000600 <SCH_Add_Task+0x98>)
 80005a8:	4613      	mov	r3, r2
 80005aa:	009b      	lsls	r3, r3, #2
 80005ac:	4413      	add	r3, r2
 80005ae:	009b      	lsls	r3, r3, #2
 80005b0:	440b      	add	r3, r1
 80005b2:	68fa      	ldr	r2, [r7, #12]
 80005b4:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[Index].Delay = DELAY;
 80005b6:	7dfa      	ldrb	r2, [r7, #23]
 80005b8:	4911      	ldr	r1, [pc, #68]	; (8000600 <SCH_Add_Task+0x98>)
 80005ba:	4613      	mov	r3, r2
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	4413      	add	r3, r2
 80005c0:	009b      	lsls	r3, r3, #2
 80005c2:	440b      	add	r3, r1
 80005c4:	3304      	adds	r3, #4
 80005c6:	68ba      	ldr	r2, [r7, #8]
 80005c8:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[Index].Period = PERIOD;
 80005ca:	7dfa      	ldrb	r2, [r7, #23]
 80005cc:	490c      	ldr	r1, [pc, #48]	; (8000600 <SCH_Add_Task+0x98>)
 80005ce:	4613      	mov	r3, r2
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	4413      	add	r3, r2
 80005d4:	009b      	lsls	r3, r3, #2
 80005d6:	440b      	add	r3, r1
 80005d8:	3308      	adds	r3, #8
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[Index].RunMe = 0;
 80005de:	7dfa      	ldrb	r2, [r7, #23]
 80005e0:	4907      	ldr	r1, [pc, #28]	; (8000600 <SCH_Add_Task+0x98>)
 80005e2:	4613      	mov	r3, r2
 80005e4:	009b      	lsls	r3, r3, #2
 80005e6:	4413      	add	r3, r2
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	440b      	add	r3, r1
 80005ec:	330c      	adds	r3, #12
 80005ee:	2200      	movs	r2, #0
 80005f0:	701a      	strb	r2, [r3, #0]
    // return position of task (to allow later deletion)
    return Index;
 80005f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	371c      	adds	r7, #28
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bc80      	pop	{r7}
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	20000098 	.word	0x20000098

08000604 <SCH_Delete_Task>:

unsigned char SCH_Delete_Task(const int TASK_INDEX){
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
    unsigned char Return_code;
    if (SCH_tasks_G[TASK_INDEX].pTask == 0) {
 800060c:	491d      	ldr	r1, [pc, #116]	; (8000684 <SCH_Delete_Task+0x80>)
 800060e:	687a      	ldr	r2, [r7, #4]
 8000610:	4613      	mov	r3, r2
 8000612:	009b      	lsls	r3, r3, #2
 8000614:	4413      	add	r3, r2
 8000616:	009b      	lsls	r3, r3, #2
 8000618:	440b      	add	r3, r1
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d102      	bne.n	8000626 <SCH_Delete_Task+0x22>
        //
        // Set the global error variable
        //Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK

        // ...also return an error code
        Return_code = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	73fb      	strb	r3, [r7, #15]
 8000624:	e001      	b.n	800062a <SCH_Delete_Task+0x26>
    } else {
        Return_code = 1;
 8000626:	2301      	movs	r3, #1
 8000628:	73fb      	strb	r3, [r7, #15]
    }

    SCH_tasks_G[TASK_INDEX].pTask = 0x0000;
 800062a:	4916      	ldr	r1, [pc, #88]	; (8000684 <SCH_Delete_Task+0x80>)
 800062c:	687a      	ldr	r2, [r7, #4]
 800062e:	4613      	mov	r3, r2
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	4413      	add	r3, r2
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	440b      	add	r3, r1
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[TASK_INDEX].Delay = 0;
 800063c:	4911      	ldr	r1, [pc, #68]	; (8000684 <SCH_Delete_Task+0x80>)
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	4613      	mov	r3, r2
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	4413      	add	r3, r2
 8000646:	009b      	lsls	r3, r3, #2
 8000648:	440b      	add	r3, r1
 800064a:	3304      	adds	r3, #4
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[TASK_INDEX].Period = 0;
 8000650:	490c      	ldr	r1, [pc, #48]	; (8000684 <SCH_Delete_Task+0x80>)
 8000652:	687a      	ldr	r2, [r7, #4]
 8000654:	4613      	mov	r3, r2
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	4413      	add	r3, r2
 800065a:	009b      	lsls	r3, r3, #2
 800065c:	440b      	add	r3, r1
 800065e:	3308      	adds	r3, #8
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[TASK_INDEX].RunMe = 0;
 8000664:	4907      	ldr	r1, [pc, #28]	; (8000684 <SCH_Delete_Task+0x80>)
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	4613      	mov	r3, r2
 800066a:	009b      	lsls	r3, r3, #2
 800066c:	4413      	add	r3, r2
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	440b      	add	r3, r1
 8000672:	330c      	adds	r3, #12
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
    return Return_code; // return status
 8000678:	7bfb      	ldrb	r3, [r7, #15]
}
 800067a:	4618      	mov	r0, r3
 800067c:	3714      	adds	r7, #20
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr
 8000684:	20000098 	.word	0x20000098

08000688 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800068e:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <HAL_MspInit+0x5c>)
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	4a14      	ldr	r2, [pc, #80]	; (80006e4 <HAL_MspInit+0x5c>)
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	6193      	str	r3, [r2, #24]
 800069a:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <HAL_MspInit+0x5c>)
 800069c:	699b      	ldr	r3, [r3, #24]
 800069e:	f003 0301 	and.w	r3, r3, #1
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a6:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <HAL_MspInit+0x5c>)
 80006a8:	69db      	ldr	r3, [r3, #28]
 80006aa:	4a0e      	ldr	r2, [pc, #56]	; (80006e4 <HAL_MspInit+0x5c>)
 80006ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b0:	61d3      	str	r3, [r2, #28]
 80006b2:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <HAL_MspInit+0x5c>)
 80006b4:	69db      	ldr	r3, [r3, #28]
 80006b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80006be:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <HAL_MspInit+0x60>)
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	4a04      	ldr	r2, [pc, #16]	; (80006e8 <HAL_MspInit+0x60>)
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006da:	bf00      	nop
 80006dc:	3714      	adds	r7, #20
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr
 80006e4:	40021000 	.word	0x40021000
 80006e8:	40010000 	.word	0x40010000

080006ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006fc:	d113      	bne.n	8000726 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006fe:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <HAL_TIM_Base_MspInit+0x44>)
 8000700:	69db      	ldr	r3, [r3, #28]
 8000702:	4a0b      	ldr	r2, [pc, #44]	; (8000730 <HAL_TIM_Base_MspInit+0x44>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	61d3      	str	r3, [r2, #28]
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <HAL_TIM_Base_MspInit+0x44>)
 800070c:	69db      	ldr	r3, [r3, #28]
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000716:	2200      	movs	r2, #0
 8000718:	2100      	movs	r1, #0
 800071a:	201c      	movs	r0, #28
 800071c:	f000 fa7d 	bl	8000c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000720:	201c      	movs	r0, #28
 8000722:	f000 fa96 	bl	8000c52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000726:	bf00      	nop
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40021000 	.word	0x40021000

08000734 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	; 0x28
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a22      	ldr	r2, [pc, #136]	; (80007d8 <HAL_UART_MspInit+0xa4>)
 8000750:	4293      	cmp	r3, r2
 8000752:	d13d      	bne.n	80007d0 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000754:	4b21      	ldr	r3, [pc, #132]	; (80007dc <HAL_UART_MspInit+0xa8>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	4a20      	ldr	r2, [pc, #128]	; (80007dc <HAL_UART_MspInit+0xa8>)
 800075a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075e:	6193      	str	r3, [r2, #24]
 8000760:	4b1e      	ldr	r3, [pc, #120]	; (80007dc <HAL_UART_MspInit+0xa8>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000768:	613b      	str	r3, [r7, #16]
 800076a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800076c:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <HAL_UART_MspInit+0xa8>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	4a1a      	ldr	r2, [pc, #104]	; (80007dc <HAL_UART_MspInit+0xa8>)
 8000772:	f043 0308 	orr.w	r3, r3, #8
 8000776:	6193      	str	r3, [r2, #24]
 8000778:	4b18      	ldr	r3, [pc, #96]	; (80007dc <HAL_UART_MspInit+0xa8>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	f003 0308 	and.w	r3, r3, #8
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000784:	2340      	movs	r3, #64	; 0x40
 8000786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000788:	2302      	movs	r3, #2
 800078a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800078c:	2303      	movs	r3, #3
 800078e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	4619      	mov	r1, r3
 8000796:	4812      	ldr	r0, [pc, #72]	; (80007e0 <HAL_UART_MspInit+0xac>)
 8000798:	f000 fa76 	bl	8000c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800079c:	2380      	movs	r3, #128	; 0x80
 800079e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	4619      	mov	r1, r3
 80007ae:	480c      	ldr	r0, [pc, #48]	; (80007e0 <HAL_UART_MspInit+0xac>)
 80007b0:	f000 fa6a 	bl	8000c88 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80007b4:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <HAL_UART_MspInit+0xb0>)
 80007b6:	685b      	ldr	r3, [r3, #4]
 80007b8:	627b      	str	r3, [r7, #36]	; 0x24
 80007ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007bc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
 80007c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c4:	f043 0304 	orr.w	r3, r3, #4
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
 80007ca:	4a06      	ldr	r2, [pc, #24]	; (80007e4 <HAL_UART_MspInit+0xb0>)
 80007cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ce:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80007d0:	bf00      	nop
 80007d2:	3728      	adds	r7, #40	; 0x28
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40013800 	.word	0x40013800
 80007dc:	40021000 	.word	0x40021000
 80007e0:	40010c00 	.word	0x40010c00
 80007e4:	40010000 	.word	0x40010000

080007e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007ec:	e7fe      	b.n	80007ec <NMI_Handler+0x4>

080007ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <HardFault_Handler+0x4>

080007f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <MemManage_Handler+0x4>

080007fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007fe:	e7fe      	b.n	80007fe <BusFault_Handler+0x4>

08000800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000804:	e7fe      	b.n	8000804 <UsageFault_Handler+0x4>

08000806 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr

08000812 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	46bd      	mov	sp, r7
 800081a:	bc80      	pop	{r7}
 800081c:	4770      	bx	lr

0800081e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	46bd      	mov	sp, r7
 8000826:	bc80      	pop	{r7}
 8000828:	4770      	bx	lr

0800082a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800082e:	f000 f901 	bl	8000a34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800083c:	4802      	ldr	r0, [pc, #8]	; (8000848 <TIM2_IRQHandler+0x10>)
 800083e:	f001 f879 	bl	8001934 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000400 	.word	0x20000400

0800084c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000854:	4a14      	ldr	r2, [pc, #80]	; (80008a8 <_sbrk+0x5c>)
 8000856:	4b15      	ldr	r3, [pc, #84]	; (80008ac <_sbrk+0x60>)
 8000858:	1ad3      	subs	r3, r2, r3
 800085a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000860:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <_sbrk+0x64>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d102      	bne.n	800086e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000868:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <_sbrk+0x64>)
 800086a:	4a12      	ldr	r2, [pc, #72]	; (80008b4 <_sbrk+0x68>)
 800086c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <_sbrk+0x64>)
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4413      	add	r3, r2
 8000876:	693a      	ldr	r2, [r7, #16]
 8000878:	429a      	cmp	r2, r3
 800087a:	d207      	bcs.n	800088c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800087c:	f001 fdbe 	bl	80023fc <__errno>
 8000880:	4603      	mov	r3, r0
 8000882:	220c      	movs	r2, #12
 8000884:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000886:	f04f 33ff 	mov.w	r3, #4294967295
 800088a:	e009      	b.n	80008a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800088c:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <_sbrk+0x64>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000892:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <_sbrk+0x64>)
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4413      	add	r3, r2
 800089a:	4a05      	ldr	r2, [pc, #20]	; (80008b0 <_sbrk+0x64>)
 800089c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800089e:	68fb      	ldr	r3, [r7, #12]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3718      	adds	r7, #24
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20002800 	.word	0x20002800
 80008ac:	00000400 	.word	0x00000400
 80008b0:	2000008c 	.word	0x2000008c
 80008b4:	20000460 	.word	0x20000460

080008b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr

080008c4 <LED1Blinky>:

#include "task.h"
#include <stdio.h>
#include <string.h>

void LED1Blinky(void) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b090      	sub	sp, #64	; 0x40
 80008c8:	af00      	add	r7, sp, #0
    char messageBuffer[64];

    //currentTime = HAL_GetTick() / 10 * 10;

    sprintf(messageBuffer, "Task 1 has started at: %d \r\n", currentTime);
 80008ca:	4b0d      	ldr	r3, [pc, #52]	; (8000900 <LED1Blinky+0x3c>)
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	463b      	mov	r3, r7
 80008d0:	490c      	ldr	r1, [pc, #48]	; (8000904 <LED1Blinky+0x40>)
 80008d2:	4618      	mov	r0, r3
 80008d4:	f001 fdc4 	bl	8002460 <siprintf>

    HAL_UART_Transmit(&huart1, (uint8_t*)messageBuffer, strlen(messageBuffer), 100);
 80008d8:	463b      	mov	r3, r7
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff fc36 	bl	800014c <strlen>
 80008e0:	4603      	mov	r3, r0
 80008e2:	b29a      	uxth	r2, r3
 80008e4:	4639      	mov	r1, r7
 80008e6:	2364      	movs	r3, #100	; 0x64
 80008e8:	4807      	ldr	r0, [pc, #28]	; (8000908 <LED1Blinky+0x44>)
 80008ea:	f001 fbb3 	bl	8002054 <HAL_UART_Transmit>

    // Toggle LED
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80008ee:	2120      	movs	r1, #32
 80008f0:	4806      	ldr	r0, [pc, #24]	; (800090c <LED1Blinky+0x48>)
 80008f2:	f000 fb5b 	bl	8000fac <HAL_GPIO_TogglePin>

}
 80008f6:	bf00      	nop
 80008f8:	3740      	adds	r7, #64	; 0x40
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000448 	.word	0x20000448
 8000904:	08002cec 	.word	0x08002cec
 8000908:	200003b8 	.word	0x200003b8
 800090c:	40010800 	.word	0x40010800

08000910 <LED2Blinky>:

void LED2Blinky(void) {
 8000910:	b580      	push	{r7, lr}
 8000912:	b090      	sub	sp, #64	; 0x40
 8000914:	af00      	add	r7, sp, #0
    char messageBuffer[64];

    sprintf(messageBuffer, "Task 2 has started at: %d \r\n", currentTime);
 8000916:	4b0d      	ldr	r3, [pc, #52]	; (800094c <LED2Blinky+0x3c>)
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	463b      	mov	r3, r7
 800091c:	490c      	ldr	r1, [pc, #48]	; (8000950 <LED2Blinky+0x40>)
 800091e:	4618      	mov	r0, r3
 8000920:	f001 fd9e 	bl	8002460 <siprintf>

    HAL_UART_Transmit(&huart1, (uint8_t*)messageBuffer, strlen(messageBuffer), 100);
 8000924:	463b      	mov	r3, r7
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fc10 	bl	800014c <strlen>
 800092c:	4603      	mov	r3, r0
 800092e:	b29a      	uxth	r2, r3
 8000930:	4639      	mov	r1, r7
 8000932:	2364      	movs	r3, #100	; 0x64
 8000934:	4807      	ldr	r0, [pc, #28]	; (8000954 <LED2Blinky+0x44>)
 8000936:	f001 fb8d 	bl	8002054 <HAL_UART_Transmit>

    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800093a:	2140      	movs	r1, #64	; 0x40
 800093c:	4806      	ldr	r0, [pc, #24]	; (8000958 <LED2Blinky+0x48>)
 800093e:	f000 fb35 	bl	8000fac <HAL_GPIO_TogglePin>

}
 8000942:	bf00      	nop
 8000944:	3740      	adds	r7, #64	; 0x40
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000448 	.word	0x20000448
 8000950:	08002d0c 	.word	0x08002d0c
 8000954:	200003b8 	.word	0x200003b8
 8000958:	40010800 	.word	0x40010800

0800095c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800095c:	f7ff ffac 	bl	80008b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000960:	480b      	ldr	r0, [pc, #44]	; (8000990 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000962:	490c      	ldr	r1, [pc, #48]	; (8000994 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000964:	4a0c      	ldr	r2, [pc, #48]	; (8000998 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000968:	e002      	b.n	8000970 <LoopCopyDataInit>

0800096a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800096a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800096c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096e:	3304      	adds	r3, #4

08000970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000974:	d3f9      	bcc.n	800096a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000976:	4a09      	ldr	r2, [pc, #36]	; (800099c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000978:	4c09      	ldr	r4, [pc, #36]	; (80009a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800097a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800097c:	e001      	b.n	8000982 <LoopFillZerobss>

0800097e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800097e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000980:	3204      	adds	r2, #4

08000982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000984:	d3fb      	bcc.n	800097e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000986:	f001 fd3f 	bl	8002408 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800098a:	f7ff fbe7 	bl	800015c <main>
  bx lr
 800098e:	4770      	bx	lr
  ldr r0, =_sdata
 8000990:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000994:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000998:	08002d94 	.word	0x08002d94
  ldr r2, =_sbss
 800099c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80009a0:	20000460 	.word	0x20000460

080009a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009a4:	e7fe      	b.n	80009a4 <ADC1_2_IRQHandler>
	...

080009a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ac:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <HAL_Init+0x28>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a07      	ldr	r2, [pc, #28]	; (80009d0 <HAL_Init+0x28>)
 80009b2:	f043 0310 	orr.w	r3, r3, #16
 80009b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b8:	2003      	movs	r0, #3
 80009ba:	f000 f923 	bl	8000c04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009be:	200f      	movs	r0, #15
 80009c0:	f000 f808 	bl	80009d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009c4:	f7ff fe60 	bl	8000688 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c8:	2300      	movs	r3, #0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40022000 	.word	0x40022000

080009d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <HAL_InitTick+0x54>)
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <HAL_InitTick+0x58>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	4619      	mov	r1, r3
 80009e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80009f2:	4618      	mov	r0, r3
 80009f4:	f000 f93b 	bl	8000c6e <HAL_SYSTICK_Config>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	e00e      	b.n	8000a20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2b0f      	cmp	r3, #15
 8000a06:	d80a      	bhi.n	8000a1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	6879      	ldr	r1, [r7, #4]
 8000a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a10:	f000 f903 	bl	8000c1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a14:	4a06      	ldr	r2, [pc, #24]	; (8000a30 <HAL_InitTick+0x5c>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	e000      	b.n	8000a20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000000 	.word	0x20000000
 8000a2c:	20000008 	.word	0x20000008
 8000a30:	20000004 	.word	0x20000004

08000a34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a38:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <HAL_IncTick+0x1c>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <HAL_IncTick+0x20>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4413      	add	r3, r2
 8000a44:	4a03      	ldr	r2, [pc, #12]	; (8000a54 <HAL_IncTick+0x20>)
 8000a46:	6013      	str	r3, [r2, #0]
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr
 8000a50:	20000008 	.word	0x20000008
 8000a54:	2000044c 	.word	0x2000044c

08000a58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a5c:	4b02      	ldr	r3, [pc, #8]	; (8000a68 <HAL_GetTick+0x10>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr
 8000a68:	2000044c 	.word	0x2000044c

08000a6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	f003 0307 	and.w	r3, r3, #7
 8000a7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a82:	68ba      	ldr	r2, [r7, #8]
 8000a84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a88:	4013      	ands	r3, r2
 8000a8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a9e:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	60d3      	str	r3, [r2, #12]
}
 8000aa4:	bf00      	nop
 8000aa6:	3714      	adds	r7, #20
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bc80      	pop	{r7}
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab8:	4b04      	ldr	r3, [pc, #16]	; (8000acc <__NVIC_GetPriorityGrouping+0x18>)
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	0a1b      	lsrs	r3, r3, #8
 8000abe:	f003 0307 	and.w	r3, r3, #7
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	db0b      	blt.n	8000afa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	f003 021f 	and.w	r2, r3, #31
 8000ae8:	4906      	ldr	r1, [pc, #24]	; (8000b04 <__NVIC_EnableIRQ+0x34>)
 8000aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aee:	095b      	lsrs	r3, r3, #5
 8000af0:	2001      	movs	r0, #1
 8000af2:	fa00 f202 	lsl.w	r2, r0, r2
 8000af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr
 8000b04:	e000e100 	.word	0xe000e100

08000b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	6039      	str	r1, [r7, #0]
 8000b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	db0a      	blt.n	8000b32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	490c      	ldr	r1, [pc, #48]	; (8000b54 <__NVIC_SetPriority+0x4c>)
 8000b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b26:	0112      	lsls	r2, r2, #4
 8000b28:	b2d2      	uxtb	r2, r2
 8000b2a:	440b      	add	r3, r1
 8000b2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b30:	e00a      	b.n	8000b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	b2da      	uxtb	r2, r3
 8000b36:	4908      	ldr	r1, [pc, #32]	; (8000b58 <__NVIC_SetPriority+0x50>)
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	f003 030f 	and.w	r3, r3, #15
 8000b3e:	3b04      	subs	r3, #4
 8000b40:	0112      	lsls	r2, r2, #4
 8000b42:	b2d2      	uxtb	r2, r2
 8000b44:	440b      	add	r3, r1
 8000b46:	761a      	strb	r2, [r3, #24]
}
 8000b48:	bf00      	nop
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	e000e100 	.word	0xe000e100
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b089      	sub	sp, #36	; 0x24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b70:	69fb      	ldr	r3, [r7, #28]
 8000b72:	f1c3 0307 	rsb	r3, r3, #7
 8000b76:	2b04      	cmp	r3, #4
 8000b78:	bf28      	it	cs
 8000b7a:	2304      	movcs	r3, #4
 8000b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	3304      	adds	r3, #4
 8000b82:	2b06      	cmp	r3, #6
 8000b84:	d902      	bls.n	8000b8c <NVIC_EncodePriority+0x30>
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	3b03      	subs	r3, #3
 8000b8a:	e000      	b.n	8000b8e <NVIC_EncodePriority+0x32>
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b90:	f04f 32ff 	mov.w	r2, #4294967295
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	43da      	mvns	r2, r3
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	401a      	ands	r2, r3
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	fa01 f303 	lsl.w	r3, r1, r3
 8000bae:	43d9      	mvns	r1, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb4:	4313      	orrs	r3, r2
         );
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3724      	adds	r7, #36	; 0x24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr

08000bc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bd0:	d301      	bcc.n	8000bd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e00f      	b.n	8000bf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <SysTick_Config+0x40>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bde:	210f      	movs	r1, #15
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	f7ff ff90 	bl	8000b08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be8:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <SysTick_Config+0x40>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bee:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <SysTick_Config+0x40>)
 8000bf0:	2207      	movs	r2, #7
 8000bf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	e000e010 	.word	0xe000e010

08000c04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f7ff ff2d 	bl	8000a6c <__NVIC_SetPriorityGrouping>
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b086      	sub	sp, #24
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	4603      	mov	r3, r0
 8000c22:	60b9      	str	r1, [r7, #8]
 8000c24:	607a      	str	r2, [r7, #4]
 8000c26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c2c:	f7ff ff42 	bl	8000ab4 <__NVIC_GetPriorityGrouping>
 8000c30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	68b9      	ldr	r1, [r7, #8]
 8000c36:	6978      	ldr	r0, [r7, #20]
 8000c38:	f7ff ff90 	bl	8000b5c <NVIC_EncodePriority>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c42:	4611      	mov	r1, r2
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff ff5f 	bl	8000b08 <__NVIC_SetPriority>
}
 8000c4a:	bf00      	nop
 8000c4c:	3718      	adds	r7, #24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b082      	sub	sp, #8
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	4603      	mov	r3, r0
 8000c5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff ff35 	bl	8000ad0 <__NVIC_EnableIRQ>
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f7ff ffa2 	bl	8000bc0 <SysTick_Config>
 8000c7c:	4603      	mov	r3, r0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b08b      	sub	sp, #44	; 0x2c
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c92:	2300      	movs	r3, #0
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c96:	2300      	movs	r3, #0
 8000c98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c9a:	e148      	b.n	8000f2e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	69fa      	ldr	r2, [r7, #28]
 8000cac:	4013      	ands	r3, r2
 8000cae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000cb0:	69ba      	ldr	r2, [r7, #24]
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	f040 8137 	bne.w	8000f28 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	4aa3      	ldr	r2, [pc, #652]	; (8000f4c <HAL_GPIO_Init+0x2c4>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d05e      	beq.n	8000d82 <HAL_GPIO_Init+0xfa>
 8000cc4:	4aa1      	ldr	r2, [pc, #644]	; (8000f4c <HAL_GPIO_Init+0x2c4>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d875      	bhi.n	8000db6 <HAL_GPIO_Init+0x12e>
 8000cca:	4aa1      	ldr	r2, [pc, #644]	; (8000f50 <HAL_GPIO_Init+0x2c8>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d058      	beq.n	8000d82 <HAL_GPIO_Init+0xfa>
 8000cd0:	4a9f      	ldr	r2, [pc, #636]	; (8000f50 <HAL_GPIO_Init+0x2c8>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d86f      	bhi.n	8000db6 <HAL_GPIO_Init+0x12e>
 8000cd6:	4a9f      	ldr	r2, [pc, #636]	; (8000f54 <HAL_GPIO_Init+0x2cc>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d052      	beq.n	8000d82 <HAL_GPIO_Init+0xfa>
 8000cdc:	4a9d      	ldr	r2, [pc, #628]	; (8000f54 <HAL_GPIO_Init+0x2cc>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d869      	bhi.n	8000db6 <HAL_GPIO_Init+0x12e>
 8000ce2:	4a9d      	ldr	r2, [pc, #628]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d04c      	beq.n	8000d82 <HAL_GPIO_Init+0xfa>
 8000ce8:	4a9b      	ldr	r2, [pc, #620]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d863      	bhi.n	8000db6 <HAL_GPIO_Init+0x12e>
 8000cee:	4a9b      	ldr	r2, [pc, #620]	; (8000f5c <HAL_GPIO_Init+0x2d4>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d046      	beq.n	8000d82 <HAL_GPIO_Init+0xfa>
 8000cf4:	4a99      	ldr	r2, [pc, #612]	; (8000f5c <HAL_GPIO_Init+0x2d4>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d85d      	bhi.n	8000db6 <HAL_GPIO_Init+0x12e>
 8000cfa:	2b12      	cmp	r3, #18
 8000cfc:	d82a      	bhi.n	8000d54 <HAL_GPIO_Init+0xcc>
 8000cfe:	2b12      	cmp	r3, #18
 8000d00:	d859      	bhi.n	8000db6 <HAL_GPIO_Init+0x12e>
 8000d02:	a201      	add	r2, pc, #4	; (adr r2, 8000d08 <HAL_GPIO_Init+0x80>)
 8000d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d08:	08000d83 	.word	0x08000d83
 8000d0c:	08000d5d 	.word	0x08000d5d
 8000d10:	08000d6f 	.word	0x08000d6f
 8000d14:	08000db1 	.word	0x08000db1
 8000d18:	08000db7 	.word	0x08000db7
 8000d1c:	08000db7 	.word	0x08000db7
 8000d20:	08000db7 	.word	0x08000db7
 8000d24:	08000db7 	.word	0x08000db7
 8000d28:	08000db7 	.word	0x08000db7
 8000d2c:	08000db7 	.word	0x08000db7
 8000d30:	08000db7 	.word	0x08000db7
 8000d34:	08000db7 	.word	0x08000db7
 8000d38:	08000db7 	.word	0x08000db7
 8000d3c:	08000db7 	.word	0x08000db7
 8000d40:	08000db7 	.word	0x08000db7
 8000d44:	08000db7 	.word	0x08000db7
 8000d48:	08000db7 	.word	0x08000db7
 8000d4c:	08000d65 	.word	0x08000d65
 8000d50:	08000d79 	.word	0x08000d79
 8000d54:	4a82      	ldr	r2, [pc, #520]	; (8000f60 <HAL_GPIO_Init+0x2d8>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d013      	beq.n	8000d82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d5a:	e02c      	b.n	8000db6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	623b      	str	r3, [r7, #32]
          break;
 8000d62:	e029      	b.n	8000db8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	3304      	adds	r3, #4
 8000d6a:	623b      	str	r3, [r7, #32]
          break;
 8000d6c:	e024      	b.n	8000db8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	68db      	ldr	r3, [r3, #12]
 8000d72:	3308      	adds	r3, #8
 8000d74:	623b      	str	r3, [r7, #32]
          break;
 8000d76:	e01f      	b.n	8000db8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	330c      	adds	r3, #12
 8000d7e:	623b      	str	r3, [r7, #32]
          break;
 8000d80:	e01a      	b.n	8000db8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d102      	bne.n	8000d90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d8a:	2304      	movs	r3, #4
 8000d8c:	623b      	str	r3, [r7, #32]
          break;
 8000d8e:	e013      	b.n	8000db8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d105      	bne.n	8000da4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d98:	2308      	movs	r3, #8
 8000d9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	69fa      	ldr	r2, [r7, #28]
 8000da0:	611a      	str	r2, [r3, #16]
          break;
 8000da2:	e009      	b.n	8000db8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000da4:	2308      	movs	r3, #8
 8000da6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	69fa      	ldr	r2, [r7, #28]
 8000dac:	615a      	str	r2, [r3, #20]
          break;
 8000dae:	e003      	b.n	8000db8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000db0:	2300      	movs	r3, #0
 8000db2:	623b      	str	r3, [r7, #32]
          break;
 8000db4:	e000      	b.n	8000db8 <HAL_GPIO_Init+0x130>
          break;
 8000db6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	2bff      	cmp	r3, #255	; 0xff
 8000dbc:	d801      	bhi.n	8000dc2 <HAL_GPIO_Init+0x13a>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	e001      	b.n	8000dc6 <HAL_GPIO_Init+0x13e>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	3304      	adds	r3, #4
 8000dc6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	2bff      	cmp	r3, #255	; 0xff
 8000dcc:	d802      	bhi.n	8000dd4 <HAL_GPIO_Init+0x14c>
 8000dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	e002      	b.n	8000dda <HAL_GPIO_Init+0x152>
 8000dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd6:	3b08      	subs	r3, #8
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	210f      	movs	r1, #15
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	fa01 f303 	lsl.w	r3, r1, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	401a      	ands	r2, r3
 8000dec:	6a39      	ldr	r1, [r7, #32]
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	fa01 f303 	lsl.w	r3, r1, r3
 8000df4:	431a      	orrs	r2, r3
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f000 8090 	beq.w	8000f28 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e08:	4b56      	ldr	r3, [pc, #344]	; (8000f64 <HAL_GPIO_Init+0x2dc>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	4a55      	ldr	r2, [pc, #340]	; (8000f64 <HAL_GPIO_Init+0x2dc>)
 8000e0e:	f043 0301 	orr.w	r3, r3, #1
 8000e12:	6193      	str	r3, [r2, #24]
 8000e14:	4b53      	ldr	r3, [pc, #332]	; (8000f64 <HAL_GPIO_Init+0x2dc>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	f003 0301 	and.w	r3, r3, #1
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e20:	4a51      	ldr	r2, [pc, #324]	; (8000f68 <HAL_GPIO_Init+0x2e0>)
 8000e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e24:	089b      	lsrs	r3, r3, #2
 8000e26:	3302      	adds	r3, #2
 8000e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	220f      	movs	r2, #15
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	68fa      	ldr	r2, [r7, #12]
 8000e40:	4013      	ands	r3, r2
 8000e42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a49      	ldr	r2, [pc, #292]	; (8000f6c <HAL_GPIO_Init+0x2e4>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d00d      	beq.n	8000e68 <HAL_GPIO_Init+0x1e0>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a48      	ldr	r2, [pc, #288]	; (8000f70 <HAL_GPIO_Init+0x2e8>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d007      	beq.n	8000e64 <HAL_GPIO_Init+0x1dc>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a47      	ldr	r2, [pc, #284]	; (8000f74 <HAL_GPIO_Init+0x2ec>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d101      	bne.n	8000e60 <HAL_GPIO_Init+0x1d8>
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	e004      	b.n	8000e6a <HAL_GPIO_Init+0x1e2>
 8000e60:	2303      	movs	r3, #3
 8000e62:	e002      	b.n	8000e6a <HAL_GPIO_Init+0x1e2>
 8000e64:	2301      	movs	r3, #1
 8000e66:	e000      	b.n	8000e6a <HAL_GPIO_Init+0x1e2>
 8000e68:	2300      	movs	r3, #0
 8000e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e6c:	f002 0203 	and.w	r2, r2, #3
 8000e70:	0092      	lsls	r2, r2, #2
 8000e72:	4093      	lsls	r3, r2
 8000e74:	68fa      	ldr	r2, [r7, #12]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e7a:	493b      	ldr	r1, [pc, #236]	; (8000f68 <HAL_GPIO_Init+0x2e0>)
 8000e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7e:	089b      	lsrs	r3, r3, #2
 8000e80:	3302      	adds	r3, #2
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d006      	beq.n	8000ea2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e94:	4b38      	ldr	r3, [pc, #224]	; (8000f78 <HAL_GPIO_Init+0x2f0>)
 8000e96:	689a      	ldr	r2, [r3, #8]
 8000e98:	4937      	ldr	r1, [pc, #220]	; (8000f78 <HAL_GPIO_Init+0x2f0>)
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	608b      	str	r3, [r1, #8]
 8000ea0:	e006      	b.n	8000eb0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ea2:	4b35      	ldr	r3, [pc, #212]	; (8000f78 <HAL_GPIO_Init+0x2f0>)
 8000ea4:	689a      	ldr	r2, [r3, #8]
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	4933      	ldr	r1, [pc, #204]	; (8000f78 <HAL_GPIO_Init+0x2f0>)
 8000eac:	4013      	ands	r3, r2
 8000eae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d006      	beq.n	8000eca <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ebc:	4b2e      	ldr	r3, [pc, #184]	; (8000f78 <HAL_GPIO_Init+0x2f0>)
 8000ebe:	68da      	ldr	r2, [r3, #12]
 8000ec0:	492d      	ldr	r1, [pc, #180]	; (8000f78 <HAL_GPIO_Init+0x2f0>)
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	60cb      	str	r3, [r1, #12]
 8000ec8:	e006      	b.n	8000ed8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000eca:	4b2b      	ldr	r3, [pc, #172]	; (8000f78 <HAL_GPIO_Init+0x2f0>)
 8000ecc:	68da      	ldr	r2, [r3, #12]
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	4929      	ldr	r1, [pc, #164]	; (8000f78 <HAL_GPIO_Init+0x2f0>)
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d006      	beq.n	8000ef2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ee4:	4b24      	ldr	r3, [pc, #144]	; (8000f78 <HAL_GPIO_Init+0x2f0>)
 8000ee6:	685a      	ldr	r2, [r3, #4]
 8000ee8:	4923      	ldr	r1, [pc, #140]	; (8000f78 <HAL_GPIO_Init+0x2f0>)
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	604b      	str	r3, [r1, #4]
 8000ef0:	e006      	b.n	8000f00 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ef2:	4b21      	ldr	r3, [pc, #132]	; (8000f78 <HAL_GPIO_Init+0x2f0>)
 8000ef4:	685a      	ldr	r2, [r3, #4]
 8000ef6:	69bb      	ldr	r3, [r7, #24]
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	491f      	ldr	r1, [pc, #124]	; (8000f78 <HAL_GPIO_Init+0x2f0>)
 8000efc:	4013      	ands	r3, r2
 8000efe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d006      	beq.n	8000f1a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f0c:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <HAL_GPIO_Init+0x2f0>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4919      	ldr	r1, [pc, #100]	; (8000f78 <HAL_GPIO_Init+0x2f0>)
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	600b      	str	r3, [r1, #0]
 8000f18:	e006      	b.n	8000f28 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f1a:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <HAL_GPIO_Init+0x2f0>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	43db      	mvns	r3, r3
 8000f22:	4915      	ldr	r1, [pc, #84]	; (8000f78 <HAL_GPIO_Init+0x2f0>)
 8000f24:	4013      	ands	r3, r2
 8000f26:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f34:	fa22 f303 	lsr.w	r3, r2, r3
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	f47f aeaf 	bne.w	8000c9c <HAL_GPIO_Init+0x14>
  }
}
 8000f3e:	bf00      	nop
 8000f40:	bf00      	nop
 8000f42:	372c      	adds	r7, #44	; 0x2c
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bc80      	pop	{r7}
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	10320000 	.word	0x10320000
 8000f50:	10310000 	.word	0x10310000
 8000f54:	10220000 	.word	0x10220000
 8000f58:	10210000 	.word	0x10210000
 8000f5c:	10120000 	.word	0x10120000
 8000f60:	10110000 	.word	0x10110000
 8000f64:	40021000 	.word	0x40021000
 8000f68:	40010000 	.word	0x40010000
 8000f6c:	40010800 	.word	0x40010800
 8000f70:	40010c00 	.word	0x40010c00
 8000f74:	40011000 	.word	0x40011000
 8000f78:	40010400 	.word	0x40010400

08000f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	460b      	mov	r3, r1
 8000f86:	807b      	strh	r3, [r7, #2]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f8c:	787b      	ldrb	r3, [r7, #1]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f92:	887a      	ldrh	r2, [r7, #2]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f98:	e003      	b.n	8000fa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f9a:	887b      	ldrh	r3, [r7, #2]
 8000f9c:	041a      	lsls	r2, r3, #16
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	611a      	str	r2, [r3, #16]
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr

08000fac <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fbe:	887a      	ldrh	r2, [r7, #2]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	041a      	lsls	r2, r3, #16
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	43d9      	mvns	r1, r3
 8000fca:	887b      	ldrh	r3, [r7, #2]
 8000fcc:	400b      	ands	r3, r1
 8000fce:	431a      	orrs	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	611a      	str	r2, [r3, #16]
}
 8000fd4:	bf00      	nop
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr
	...

08000fe0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d101      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e26c      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	f000 8087 	beq.w	800110e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001000:	4b92      	ldr	r3, [pc, #584]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 030c 	and.w	r3, r3, #12
 8001008:	2b04      	cmp	r3, #4
 800100a:	d00c      	beq.n	8001026 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800100c:	4b8f      	ldr	r3, [pc, #572]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 030c 	and.w	r3, r3, #12
 8001014:	2b08      	cmp	r3, #8
 8001016:	d112      	bne.n	800103e <HAL_RCC_OscConfig+0x5e>
 8001018:	4b8c      	ldr	r3, [pc, #560]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001024:	d10b      	bne.n	800103e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001026:	4b89      	ldr	r3, [pc, #548]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d06c      	beq.n	800110c <HAL_RCC_OscConfig+0x12c>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d168      	bne.n	800110c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e246      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001046:	d106      	bne.n	8001056 <HAL_RCC_OscConfig+0x76>
 8001048:	4b80      	ldr	r3, [pc, #512]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a7f      	ldr	r2, [pc, #508]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 800104e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001052:	6013      	str	r3, [r2, #0]
 8001054:	e02e      	b.n	80010b4 <HAL_RCC_OscConfig+0xd4>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d10c      	bne.n	8001078 <HAL_RCC_OscConfig+0x98>
 800105e:	4b7b      	ldr	r3, [pc, #492]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a7a      	ldr	r2, [pc, #488]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001064:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001068:	6013      	str	r3, [r2, #0]
 800106a:	4b78      	ldr	r3, [pc, #480]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a77      	ldr	r2, [pc, #476]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001070:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001074:	6013      	str	r3, [r2, #0]
 8001076:	e01d      	b.n	80010b4 <HAL_RCC_OscConfig+0xd4>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001080:	d10c      	bne.n	800109c <HAL_RCC_OscConfig+0xbc>
 8001082:	4b72      	ldr	r3, [pc, #456]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a71      	ldr	r2, [pc, #452]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001088:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800108c:	6013      	str	r3, [r2, #0]
 800108e:	4b6f      	ldr	r3, [pc, #444]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a6e      	ldr	r2, [pc, #440]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001098:	6013      	str	r3, [r2, #0]
 800109a:	e00b      	b.n	80010b4 <HAL_RCC_OscConfig+0xd4>
 800109c:	4b6b      	ldr	r3, [pc, #428]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a6a      	ldr	r2, [pc, #424]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 80010a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010a6:	6013      	str	r3, [r2, #0]
 80010a8:	4b68      	ldr	r3, [pc, #416]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a67      	ldr	r2, [pc, #412]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 80010ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d013      	beq.n	80010e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010bc:	f7ff fccc 	bl	8000a58 <HAL_GetTick>
 80010c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010c2:	e008      	b.n	80010d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010c4:	f7ff fcc8 	bl	8000a58 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b64      	cmp	r3, #100	; 0x64
 80010d0:	d901      	bls.n	80010d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e1fa      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010d6:	4b5d      	ldr	r3, [pc, #372]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d0f0      	beq.n	80010c4 <HAL_RCC_OscConfig+0xe4>
 80010e2:	e014      	b.n	800110e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e4:	f7ff fcb8 	bl	8000a58 <HAL_GetTick>
 80010e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ea:	e008      	b.n	80010fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010ec:	f7ff fcb4 	bl	8000a58 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b64      	cmp	r3, #100	; 0x64
 80010f8:	d901      	bls.n	80010fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e1e6      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010fe:	4b53      	ldr	r3, [pc, #332]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d1f0      	bne.n	80010ec <HAL_RCC_OscConfig+0x10c>
 800110a:	e000      	b.n	800110e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800110c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	2b00      	cmp	r3, #0
 8001118:	d063      	beq.n	80011e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800111a:	4b4c      	ldr	r3, [pc, #304]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f003 030c 	and.w	r3, r3, #12
 8001122:	2b00      	cmp	r3, #0
 8001124:	d00b      	beq.n	800113e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001126:	4b49      	ldr	r3, [pc, #292]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f003 030c 	and.w	r3, r3, #12
 800112e:	2b08      	cmp	r3, #8
 8001130:	d11c      	bne.n	800116c <HAL_RCC_OscConfig+0x18c>
 8001132:	4b46      	ldr	r3, [pc, #280]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d116      	bne.n	800116c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800113e:	4b43      	ldr	r3, [pc, #268]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	2b00      	cmp	r3, #0
 8001148:	d005      	beq.n	8001156 <HAL_RCC_OscConfig+0x176>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	691b      	ldr	r3, [r3, #16]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d001      	beq.n	8001156 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e1ba      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001156:	4b3d      	ldr	r3, [pc, #244]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	00db      	lsls	r3, r3, #3
 8001164:	4939      	ldr	r1, [pc, #228]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001166:	4313      	orrs	r3, r2
 8001168:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800116a:	e03a      	b.n	80011e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	691b      	ldr	r3, [r3, #16]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d020      	beq.n	80011b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001174:	4b36      	ldr	r3, [pc, #216]	; (8001250 <HAL_RCC_OscConfig+0x270>)
 8001176:	2201      	movs	r2, #1
 8001178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117a:	f7ff fc6d 	bl	8000a58 <HAL_GetTick>
 800117e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001180:	e008      	b.n	8001194 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001182:	f7ff fc69 	bl	8000a58 <HAL_GetTick>
 8001186:	4602      	mov	r2, r0
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d901      	bls.n	8001194 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001190:	2303      	movs	r3, #3
 8001192:	e19b      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001194:	4b2d      	ldr	r3, [pc, #180]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0302 	and.w	r3, r3, #2
 800119c:	2b00      	cmp	r3, #0
 800119e:	d0f0      	beq.n	8001182 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a0:	4b2a      	ldr	r3, [pc, #168]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	695b      	ldr	r3, [r3, #20]
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	4927      	ldr	r1, [pc, #156]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 80011b0:	4313      	orrs	r3, r2
 80011b2:	600b      	str	r3, [r1, #0]
 80011b4:	e015      	b.n	80011e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011b6:	4b26      	ldr	r3, [pc, #152]	; (8001250 <HAL_RCC_OscConfig+0x270>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011bc:	f7ff fc4c 	bl	8000a58 <HAL_GetTick>
 80011c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011c2:	e008      	b.n	80011d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011c4:	f7ff fc48 	bl	8000a58 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d901      	bls.n	80011d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	e17a      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011d6:	4b1d      	ldr	r3, [pc, #116]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d1f0      	bne.n	80011c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0308 	and.w	r3, r3, #8
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d03a      	beq.n	8001264 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d019      	beq.n	800122a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011f6:	4b17      	ldr	r3, [pc, #92]	; (8001254 <HAL_RCC_OscConfig+0x274>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011fc:	f7ff fc2c 	bl	8000a58 <HAL_GetTick>
 8001200:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001202:	e008      	b.n	8001216 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001204:	f7ff fc28 	bl	8000a58 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b02      	cmp	r3, #2
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e15a      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001216:	4b0d      	ldr	r3, [pc, #52]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	2b00      	cmp	r3, #0
 8001220:	d0f0      	beq.n	8001204 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001222:	2001      	movs	r0, #1
 8001224:	f000 facc 	bl	80017c0 <RCC_Delay>
 8001228:	e01c      	b.n	8001264 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800122a:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <HAL_RCC_OscConfig+0x274>)
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001230:	f7ff fc12 	bl	8000a58 <HAL_GetTick>
 8001234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001236:	e00f      	b.n	8001258 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001238:	f7ff fc0e 	bl	8000a58 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d908      	bls.n	8001258 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e140      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
 800124a:	bf00      	nop
 800124c:	40021000 	.word	0x40021000
 8001250:	42420000 	.word	0x42420000
 8001254:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001258:	4b9e      	ldr	r3, [pc, #632]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 800125a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d1e9      	bne.n	8001238 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0304 	and.w	r3, r3, #4
 800126c:	2b00      	cmp	r3, #0
 800126e:	f000 80a6 	beq.w	80013be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001272:	2300      	movs	r3, #0
 8001274:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001276:	4b97      	ldr	r3, [pc, #604]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d10d      	bne.n	800129e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001282:	4b94      	ldr	r3, [pc, #592]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001284:	69db      	ldr	r3, [r3, #28]
 8001286:	4a93      	ldr	r2, [pc, #588]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800128c:	61d3      	str	r3, [r2, #28]
 800128e:	4b91      	ldr	r3, [pc, #580]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800129a:	2301      	movs	r3, #1
 800129c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800129e:	4b8e      	ldr	r3, [pc, #568]	; (80014d8 <HAL_RCC_OscConfig+0x4f8>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d118      	bne.n	80012dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012aa:	4b8b      	ldr	r3, [pc, #556]	; (80014d8 <HAL_RCC_OscConfig+0x4f8>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a8a      	ldr	r2, [pc, #552]	; (80014d8 <HAL_RCC_OscConfig+0x4f8>)
 80012b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012b6:	f7ff fbcf 	bl	8000a58 <HAL_GetTick>
 80012ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012bc:	e008      	b.n	80012d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012be:	f7ff fbcb 	bl	8000a58 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b64      	cmp	r3, #100	; 0x64
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e0fd      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012d0:	4b81      	ldr	r3, [pc, #516]	; (80014d8 <HAL_RCC_OscConfig+0x4f8>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d0f0      	beq.n	80012be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d106      	bne.n	80012f2 <HAL_RCC_OscConfig+0x312>
 80012e4:	4b7b      	ldr	r3, [pc, #492]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 80012e6:	6a1b      	ldr	r3, [r3, #32]
 80012e8:	4a7a      	ldr	r2, [pc, #488]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 80012ea:	f043 0301 	orr.w	r3, r3, #1
 80012ee:	6213      	str	r3, [r2, #32]
 80012f0:	e02d      	b.n	800134e <HAL_RCC_OscConfig+0x36e>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d10c      	bne.n	8001314 <HAL_RCC_OscConfig+0x334>
 80012fa:	4b76      	ldr	r3, [pc, #472]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 80012fc:	6a1b      	ldr	r3, [r3, #32]
 80012fe:	4a75      	ldr	r2, [pc, #468]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001300:	f023 0301 	bic.w	r3, r3, #1
 8001304:	6213      	str	r3, [r2, #32]
 8001306:	4b73      	ldr	r3, [pc, #460]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001308:	6a1b      	ldr	r3, [r3, #32]
 800130a:	4a72      	ldr	r2, [pc, #456]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 800130c:	f023 0304 	bic.w	r3, r3, #4
 8001310:	6213      	str	r3, [r2, #32]
 8001312:	e01c      	b.n	800134e <HAL_RCC_OscConfig+0x36e>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	2b05      	cmp	r3, #5
 800131a:	d10c      	bne.n	8001336 <HAL_RCC_OscConfig+0x356>
 800131c:	4b6d      	ldr	r3, [pc, #436]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 800131e:	6a1b      	ldr	r3, [r3, #32]
 8001320:	4a6c      	ldr	r2, [pc, #432]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001322:	f043 0304 	orr.w	r3, r3, #4
 8001326:	6213      	str	r3, [r2, #32]
 8001328:	4b6a      	ldr	r3, [pc, #424]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 800132a:	6a1b      	ldr	r3, [r3, #32]
 800132c:	4a69      	ldr	r2, [pc, #420]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 800132e:	f043 0301 	orr.w	r3, r3, #1
 8001332:	6213      	str	r3, [r2, #32]
 8001334:	e00b      	b.n	800134e <HAL_RCC_OscConfig+0x36e>
 8001336:	4b67      	ldr	r3, [pc, #412]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001338:	6a1b      	ldr	r3, [r3, #32]
 800133a:	4a66      	ldr	r2, [pc, #408]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 800133c:	f023 0301 	bic.w	r3, r3, #1
 8001340:	6213      	str	r3, [r2, #32]
 8001342:	4b64      	ldr	r3, [pc, #400]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001344:	6a1b      	ldr	r3, [r3, #32]
 8001346:	4a63      	ldr	r2, [pc, #396]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001348:	f023 0304 	bic.w	r3, r3, #4
 800134c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d015      	beq.n	8001382 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001356:	f7ff fb7f 	bl	8000a58 <HAL_GetTick>
 800135a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800135c:	e00a      	b.n	8001374 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800135e:	f7ff fb7b 	bl	8000a58 <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	f241 3288 	movw	r2, #5000	; 0x1388
 800136c:	4293      	cmp	r3, r2
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e0ab      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001374:	4b57      	ldr	r3, [pc, #348]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001376:	6a1b      	ldr	r3, [r3, #32]
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d0ee      	beq.n	800135e <HAL_RCC_OscConfig+0x37e>
 8001380:	e014      	b.n	80013ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001382:	f7ff fb69 	bl	8000a58 <HAL_GetTick>
 8001386:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001388:	e00a      	b.n	80013a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800138a:	f7ff fb65 	bl	8000a58 <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	f241 3288 	movw	r2, #5000	; 0x1388
 8001398:	4293      	cmp	r3, r2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e095      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013a0:	4b4c      	ldr	r3, [pc, #304]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1ee      	bne.n	800138a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013ac:	7dfb      	ldrb	r3, [r7, #23]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d105      	bne.n	80013be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013b2:	4b48      	ldr	r3, [pc, #288]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	4a47      	ldr	r2, [pc, #284]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 80013b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f000 8081 	beq.w	80014ca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013c8:	4b42      	ldr	r3, [pc, #264]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 030c 	and.w	r3, r3, #12
 80013d0:	2b08      	cmp	r3, #8
 80013d2:	d061      	beq.n	8001498 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	69db      	ldr	r3, [r3, #28]
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d146      	bne.n	800146a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013dc:	4b3f      	ldr	r3, [pc, #252]	; (80014dc <HAL_RCC_OscConfig+0x4fc>)
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e2:	f7ff fb39 	bl	8000a58 <HAL_GetTick>
 80013e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ea:	f7ff fb35 	bl	8000a58 <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e067      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013fc:	4b35      	ldr	r3, [pc, #212]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1f0      	bne.n	80013ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a1b      	ldr	r3, [r3, #32]
 800140c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001410:	d108      	bne.n	8001424 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001412:	4b30      	ldr	r3, [pc, #192]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	492d      	ldr	r1, [pc, #180]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001420:	4313      	orrs	r3, r2
 8001422:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001424:	4b2b      	ldr	r3, [pc, #172]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a19      	ldr	r1, [r3, #32]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001434:	430b      	orrs	r3, r1
 8001436:	4927      	ldr	r1, [pc, #156]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001438:	4313      	orrs	r3, r2
 800143a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800143c:	4b27      	ldr	r3, [pc, #156]	; (80014dc <HAL_RCC_OscConfig+0x4fc>)
 800143e:	2201      	movs	r2, #1
 8001440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001442:	f7ff fb09 	bl	8000a58 <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001448:	e008      	b.n	800145c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800144a:	f7ff fb05 	bl	8000a58 <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e037      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800145c:	4b1d      	ldr	r3, [pc, #116]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d0f0      	beq.n	800144a <HAL_RCC_OscConfig+0x46a>
 8001468:	e02f      	b.n	80014ca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800146a:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <HAL_RCC_OscConfig+0x4fc>)
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001470:	f7ff faf2 	bl	8000a58 <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001478:	f7ff faee 	bl	8000a58 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e020      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800148a:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1f0      	bne.n	8001478 <HAL_RCC_OscConfig+0x498>
 8001496:	e018      	b.n	80014ca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	69db      	ldr	r3, [r3, #28]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d101      	bne.n	80014a4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e013      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014a4:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a1b      	ldr	r3, [r3, #32]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d106      	bne.n	80014c6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d001      	beq.n	80014ca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e000      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40007000 	.word	0x40007000
 80014dc:	42420060 	.word	0x42420060

080014e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d101      	bne.n	80014f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e0d0      	b.n	8001696 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014f4:	4b6a      	ldr	r3, [pc, #424]	; (80016a0 <HAL_RCC_ClockConfig+0x1c0>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0307 	and.w	r3, r3, #7
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d910      	bls.n	8001524 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001502:	4b67      	ldr	r3, [pc, #412]	; (80016a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f023 0207 	bic.w	r2, r3, #7
 800150a:	4965      	ldr	r1, [pc, #404]	; (80016a0 <HAL_RCC_ClockConfig+0x1c0>)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	4313      	orrs	r3, r2
 8001510:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001512:	4b63      	ldr	r3, [pc, #396]	; (80016a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	683a      	ldr	r2, [r7, #0]
 800151c:	429a      	cmp	r2, r3
 800151e:	d001      	beq.n	8001524 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e0b8      	b.n	8001696 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d020      	beq.n	8001572 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0304 	and.w	r3, r3, #4
 8001538:	2b00      	cmp	r3, #0
 800153a:	d005      	beq.n	8001548 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800153c:	4b59      	ldr	r3, [pc, #356]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	4a58      	ldr	r2, [pc, #352]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001542:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001546:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0308 	and.w	r3, r3, #8
 8001550:	2b00      	cmp	r3, #0
 8001552:	d005      	beq.n	8001560 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001554:	4b53      	ldr	r3, [pc, #332]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	4a52      	ldr	r2, [pc, #328]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 800155a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800155e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001560:	4b50      	ldr	r3, [pc, #320]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	494d      	ldr	r1, [pc, #308]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 800156e:	4313      	orrs	r3, r2
 8001570:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	2b00      	cmp	r3, #0
 800157c:	d040      	beq.n	8001600 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d107      	bne.n	8001596 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001586:	4b47      	ldr	r3, [pc, #284]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d115      	bne.n	80015be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e07f      	b.n	8001696 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2b02      	cmp	r3, #2
 800159c:	d107      	bne.n	80015ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800159e:	4b41      	ldr	r3, [pc, #260]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d109      	bne.n	80015be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e073      	b.n	8001696 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ae:	4b3d      	ldr	r3, [pc, #244]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e06b      	b.n	8001696 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015be:	4b39      	ldr	r3, [pc, #228]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f023 0203 	bic.w	r2, r3, #3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	4936      	ldr	r1, [pc, #216]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015d0:	f7ff fa42 	bl	8000a58 <HAL_GetTick>
 80015d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015d6:	e00a      	b.n	80015ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015d8:	f7ff fa3e 	bl	8000a58 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e053      	b.n	8001696 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ee:	4b2d      	ldr	r3, [pc, #180]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f003 020c 	and.w	r2, r3, #12
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d1eb      	bne.n	80015d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001600:	4b27      	ldr	r3, [pc, #156]	; (80016a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0307 	and.w	r3, r3, #7
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	429a      	cmp	r2, r3
 800160c:	d210      	bcs.n	8001630 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800160e:	4b24      	ldr	r3, [pc, #144]	; (80016a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f023 0207 	bic.w	r2, r3, #7
 8001616:	4922      	ldr	r1, [pc, #136]	; (80016a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	4313      	orrs	r3, r2
 800161c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800161e:	4b20      	ldr	r3, [pc, #128]	; (80016a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	683a      	ldr	r2, [r7, #0]
 8001628:	429a      	cmp	r2, r3
 800162a:	d001      	beq.n	8001630 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e032      	b.n	8001696 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0304 	and.w	r3, r3, #4
 8001638:	2b00      	cmp	r3, #0
 800163a:	d008      	beq.n	800164e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800163c:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	4916      	ldr	r1, [pc, #88]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 800164a:	4313      	orrs	r3, r2
 800164c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	2b00      	cmp	r3, #0
 8001658:	d009      	beq.n	800166e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800165a:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	490e      	ldr	r1, [pc, #56]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 800166a:	4313      	orrs	r3, r2
 800166c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800166e:	f000 f821 	bl	80016b4 <HAL_RCC_GetSysClockFreq>
 8001672:	4602      	mov	r2, r0
 8001674:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	091b      	lsrs	r3, r3, #4
 800167a:	f003 030f 	and.w	r3, r3, #15
 800167e:	490a      	ldr	r1, [pc, #40]	; (80016a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001680:	5ccb      	ldrb	r3, [r1, r3]
 8001682:	fa22 f303 	lsr.w	r3, r2, r3
 8001686:	4a09      	ldr	r2, [pc, #36]	; (80016ac <HAL_RCC_ClockConfig+0x1cc>)
 8001688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <HAL_RCC_ClockConfig+0x1d0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff f9a0 	bl	80009d4 <HAL_InitTick>

  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40022000 	.word	0x40022000
 80016a4:	40021000 	.word	0x40021000
 80016a8:	08002d2c 	.word	0x08002d2c
 80016ac:	20000000 	.word	0x20000000
 80016b0:	20000004 	.word	0x20000004

080016b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b087      	sub	sp, #28
 80016b8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	2300      	movs	r3, #0
 80016c0:	60bb      	str	r3, [r7, #8]
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	2300      	movs	r3, #0
 80016c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80016ce:	4b1e      	ldr	r3, [pc, #120]	; (8001748 <HAL_RCC_GetSysClockFreq+0x94>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f003 030c 	and.w	r3, r3, #12
 80016da:	2b04      	cmp	r3, #4
 80016dc:	d002      	beq.n	80016e4 <HAL_RCC_GetSysClockFreq+0x30>
 80016de:	2b08      	cmp	r3, #8
 80016e0:	d003      	beq.n	80016ea <HAL_RCC_GetSysClockFreq+0x36>
 80016e2:	e027      	b.n	8001734 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016e4:	4b19      	ldr	r3, [pc, #100]	; (800174c <HAL_RCC_GetSysClockFreq+0x98>)
 80016e6:	613b      	str	r3, [r7, #16]
      break;
 80016e8:	e027      	b.n	800173a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	0c9b      	lsrs	r3, r3, #18
 80016ee:	f003 030f 	and.w	r3, r3, #15
 80016f2:	4a17      	ldr	r2, [pc, #92]	; (8001750 <HAL_RCC_GetSysClockFreq+0x9c>)
 80016f4:	5cd3      	ldrb	r3, [r2, r3]
 80016f6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d010      	beq.n	8001724 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001702:	4b11      	ldr	r3, [pc, #68]	; (8001748 <HAL_RCC_GetSysClockFreq+0x94>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	0c5b      	lsrs	r3, r3, #17
 8001708:	f003 0301 	and.w	r3, r3, #1
 800170c:	4a11      	ldr	r2, [pc, #68]	; (8001754 <HAL_RCC_GetSysClockFreq+0xa0>)
 800170e:	5cd3      	ldrb	r3, [r2, r3]
 8001710:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a0d      	ldr	r2, [pc, #52]	; (800174c <HAL_RCC_GetSysClockFreq+0x98>)
 8001716:	fb02 f203 	mul.w	r2, r2, r3
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001720:	617b      	str	r3, [r7, #20]
 8001722:	e004      	b.n	800172e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a0c      	ldr	r2, [pc, #48]	; (8001758 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001728:	fb02 f303 	mul.w	r3, r2, r3
 800172c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	613b      	str	r3, [r7, #16]
      break;
 8001732:	e002      	b.n	800173a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001734:	4b05      	ldr	r3, [pc, #20]	; (800174c <HAL_RCC_GetSysClockFreq+0x98>)
 8001736:	613b      	str	r3, [r7, #16]
      break;
 8001738:	bf00      	nop
    }
  }
  return sysclockfreq;
 800173a:	693b      	ldr	r3, [r7, #16]
}
 800173c:	4618      	mov	r0, r3
 800173e:	371c      	adds	r7, #28
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	40021000 	.word	0x40021000
 800174c:	007a1200 	.word	0x007a1200
 8001750:	08002d44 	.word	0x08002d44
 8001754:	08002d54 	.word	0x08002d54
 8001758:	003d0900 	.word	0x003d0900

0800175c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001760:	4b02      	ldr	r3, [pc, #8]	; (800176c <HAL_RCC_GetHCLKFreq+0x10>)
 8001762:	681b      	ldr	r3, [r3, #0]
}
 8001764:	4618      	mov	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr
 800176c:	20000000 	.word	0x20000000

08001770 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001774:	f7ff fff2 	bl	800175c <HAL_RCC_GetHCLKFreq>
 8001778:	4602      	mov	r2, r0
 800177a:	4b05      	ldr	r3, [pc, #20]	; (8001790 <HAL_RCC_GetPCLK1Freq+0x20>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	0a1b      	lsrs	r3, r3, #8
 8001780:	f003 0307 	and.w	r3, r3, #7
 8001784:	4903      	ldr	r1, [pc, #12]	; (8001794 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001786:	5ccb      	ldrb	r3, [r1, r3]
 8001788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800178c:	4618      	mov	r0, r3
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40021000 	.word	0x40021000
 8001794:	08002d3c 	.word	0x08002d3c

08001798 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800179c:	f7ff ffde 	bl	800175c <HAL_RCC_GetHCLKFreq>
 80017a0:	4602      	mov	r2, r0
 80017a2:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	0adb      	lsrs	r3, r3, #11
 80017a8:	f003 0307 	and.w	r3, r3, #7
 80017ac:	4903      	ldr	r1, [pc, #12]	; (80017bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80017ae:	5ccb      	ldrb	r3, [r1, r3]
 80017b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40021000 	.word	0x40021000
 80017bc:	08002d3c 	.word	0x08002d3c

080017c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017c8:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <RCC_Delay+0x34>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a0a      	ldr	r2, [pc, #40]	; (80017f8 <RCC_Delay+0x38>)
 80017ce:	fba2 2303 	umull	r2, r3, r2, r3
 80017d2:	0a5b      	lsrs	r3, r3, #9
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	fb02 f303 	mul.w	r3, r2, r3
 80017da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80017dc:	bf00      	nop
  }
  while (Delay --);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	1e5a      	subs	r2, r3, #1
 80017e2:	60fa      	str	r2, [r7, #12]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1f9      	bne.n	80017dc <RCC_Delay+0x1c>
}
 80017e8:	bf00      	nop
 80017ea:	bf00      	nop
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr
 80017f4:	20000000 	.word	0x20000000
 80017f8:	10624dd3 	.word	0x10624dd3

080017fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e041      	b.n	8001892 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d106      	bne.n	8001828 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7fe ff62 	bl	80006ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2202      	movs	r2, #2
 800182c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3304      	adds	r3, #4
 8001838:	4619      	mov	r1, r3
 800183a:	4610      	mov	r0, r2
 800183c:	f000 fa56 	bl	8001cec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2201      	movs	r2, #1
 800188c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
	...

0800189c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d001      	beq.n	80018b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e035      	b.n	8001920 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2202      	movs	r2, #2
 80018b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68da      	ldr	r2, [r3, #12]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f042 0201 	orr.w	r2, r2, #1
 80018ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a16      	ldr	r2, [pc, #88]	; (800192c <HAL_TIM_Base_Start_IT+0x90>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d009      	beq.n	80018ea <HAL_TIM_Base_Start_IT+0x4e>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018de:	d004      	beq.n	80018ea <HAL_TIM_Base_Start_IT+0x4e>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a12      	ldr	r2, [pc, #72]	; (8001930 <HAL_TIM_Base_Start_IT+0x94>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d111      	bne.n	800190e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f003 0307 	and.w	r3, r3, #7
 80018f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2b06      	cmp	r3, #6
 80018fa:	d010      	beq.n	800191e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 0201 	orr.w	r2, r2, #1
 800190a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800190c:	e007      	b.n	800191e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f042 0201 	orr.w	r2, r2, #1
 800191c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	3714      	adds	r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	40012c00 	.word	0x40012c00
 8001930:	40000400 	.word	0x40000400

08001934 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d020      	beq.n	8001998 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d01b      	beq.n	8001998 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f06f 0202 	mvn.w	r2, #2
 8001968:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2201      	movs	r2, #1
 800196e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	f003 0303 	and.w	r3, r3, #3
 800197a:	2b00      	cmp	r3, #0
 800197c:	d003      	beq.n	8001986 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 f998 	bl	8001cb4 <HAL_TIM_IC_CaptureCallback>
 8001984:	e005      	b.n	8001992 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 f98b 	bl	8001ca2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f000 f99a 	bl	8001cc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	f003 0304 	and.w	r3, r3, #4
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d020      	beq.n	80019e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f003 0304 	and.w	r3, r3, #4
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d01b      	beq.n	80019e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f06f 0204 	mvn.w	r2, #4
 80019b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2202      	movs	r2, #2
 80019ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 f972 	bl	8001cb4 <HAL_TIM_IC_CaptureCallback>
 80019d0:	e005      	b.n	80019de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 f965 	bl	8001ca2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f000 f974 	bl	8001cc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	f003 0308 	and.w	r3, r3, #8
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d020      	beq.n	8001a30 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f003 0308 	and.w	r3, r3, #8
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d01b      	beq.n	8001a30 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f06f 0208 	mvn.w	r2, #8
 8001a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2204      	movs	r2, #4
 8001a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	f003 0303 	and.w	r3, r3, #3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f000 f94c 	bl	8001cb4 <HAL_TIM_IC_CaptureCallback>
 8001a1c:	e005      	b.n	8001a2a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f000 f93f 	bl	8001ca2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f000 f94e 	bl	8001cc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	f003 0310 	and.w	r3, r3, #16
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d020      	beq.n	8001a7c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f003 0310 	and.w	r3, r3, #16
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d01b      	beq.n	8001a7c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f06f 0210 	mvn.w	r2, #16
 8001a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2208      	movs	r2, #8
 8001a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 f926 	bl	8001cb4 <HAL_TIM_IC_CaptureCallback>
 8001a68:	e005      	b.n	8001a76 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 f919 	bl	8001ca2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 f928 	bl	8001cc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d00c      	beq.n	8001aa0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d007      	beq.n	8001aa0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f06f 0201 	mvn.w	r2, #1
 8001a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7fe fc74 	bl	8000388 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00c      	beq.n	8001ac4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d007      	beq.n	8001ac4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 fa6f 	bl	8001fa2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d00c      	beq.n	8001ae8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d007      	beq.n	8001ae8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 f8f8 	bl	8001cd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	f003 0320 	and.w	r3, r3, #32
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d00c      	beq.n	8001b0c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f003 0320 	and.w	r3, r3, #32
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d007      	beq.n	8001b0c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f06f 0220 	mvn.w	r2, #32
 8001b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 fa42 	bl	8001f90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b0c:	bf00      	nop
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d101      	bne.n	8001b30 <HAL_TIM_ConfigClockSource+0x1c>
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	e0b4      	b.n	8001c9a <HAL_TIM_ConfigClockSource+0x186>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001b4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68ba      	ldr	r2, [r7, #8]
 8001b5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b68:	d03e      	beq.n	8001be8 <HAL_TIM_ConfigClockSource+0xd4>
 8001b6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b6e:	f200 8087 	bhi.w	8001c80 <HAL_TIM_ConfigClockSource+0x16c>
 8001b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b76:	f000 8086 	beq.w	8001c86 <HAL_TIM_ConfigClockSource+0x172>
 8001b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b7e:	d87f      	bhi.n	8001c80 <HAL_TIM_ConfigClockSource+0x16c>
 8001b80:	2b70      	cmp	r3, #112	; 0x70
 8001b82:	d01a      	beq.n	8001bba <HAL_TIM_ConfigClockSource+0xa6>
 8001b84:	2b70      	cmp	r3, #112	; 0x70
 8001b86:	d87b      	bhi.n	8001c80 <HAL_TIM_ConfigClockSource+0x16c>
 8001b88:	2b60      	cmp	r3, #96	; 0x60
 8001b8a:	d050      	beq.n	8001c2e <HAL_TIM_ConfigClockSource+0x11a>
 8001b8c:	2b60      	cmp	r3, #96	; 0x60
 8001b8e:	d877      	bhi.n	8001c80 <HAL_TIM_ConfigClockSource+0x16c>
 8001b90:	2b50      	cmp	r3, #80	; 0x50
 8001b92:	d03c      	beq.n	8001c0e <HAL_TIM_ConfigClockSource+0xfa>
 8001b94:	2b50      	cmp	r3, #80	; 0x50
 8001b96:	d873      	bhi.n	8001c80 <HAL_TIM_ConfigClockSource+0x16c>
 8001b98:	2b40      	cmp	r3, #64	; 0x40
 8001b9a:	d058      	beq.n	8001c4e <HAL_TIM_ConfigClockSource+0x13a>
 8001b9c:	2b40      	cmp	r3, #64	; 0x40
 8001b9e:	d86f      	bhi.n	8001c80 <HAL_TIM_ConfigClockSource+0x16c>
 8001ba0:	2b30      	cmp	r3, #48	; 0x30
 8001ba2:	d064      	beq.n	8001c6e <HAL_TIM_ConfigClockSource+0x15a>
 8001ba4:	2b30      	cmp	r3, #48	; 0x30
 8001ba6:	d86b      	bhi.n	8001c80 <HAL_TIM_ConfigClockSource+0x16c>
 8001ba8:	2b20      	cmp	r3, #32
 8001baa:	d060      	beq.n	8001c6e <HAL_TIM_ConfigClockSource+0x15a>
 8001bac:	2b20      	cmp	r3, #32
 8001bae:	d867      	bhi.n	8001c80 <HAL_TIM_ConfigClockSource+0x16c>
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d05c      	beq.n	8001c6e <HAL_TIM_ConfigClockSource+0x15a>
 8001bb4:	2b10      	cmp	r3, #16
 8001bb6:	d05a      	beq.n	8001c6e <HAL_TIM_ConfigClockSource+0x15a>
 8001bb8:	e062      	b.n	8001c80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6818      	ldr	r0, [r3, #0]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	6899      	ldr	r1, [r3, #8]
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	f000 f96a 	bl	8001ea2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001bdc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68ba      	ldr	r2, [r7, #8]
 8001be4:	609a      	str	r2, [r3, #8]
      break;
 8001be6:	e04f      	b.n	8001c88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6818      	ldr	r0, [r3, #0]
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	6899      	ldr	r1, [r3, #8]
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	f000 f953 	bl	8001ea2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c0a:	609a      	str	r2, [r3, #8]
      break;
 8001c0c:	e03c      	b.n	8001c88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	6859      	ldr	r1, [r3, #4]
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	f000 f8ca 	bl	8001db4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2150      	movs	r1, #80	; 0x50
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 f921 	bl	8001e6e <TIM_ITRx_SetConfig>
      break;
 8001c2c:	e02c      	b.n	8001c88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6818      	ldr	r0, [r3, #0]
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	6859      	ldr	r1, [r3, #4]
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	f000 f8e8 	bl	8001e10 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2160      	movs	r1, #96	; 0x60
 8001c46:	4618      	mov	r0, r3
 8001c48:	f000 f911 	bl	8001e6e <TIM_ITRx_SetConfig>
      break;
 8001c4c:	e01c      	b.n	8001c88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6818      	ldr	r0, [r3, #0]
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	6859      	ldr	r1, [r3, #4]
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	f000 f8aa 	bl	8001db4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2140      	movs	r1, #64	; 0x40
 8001c66:	4618      	mov	r0, r3
 8001c68:	f000 f901 	bl	8001e6e <TIM_ITRx_SetConfig>
      break;
 8001c6c:	e00c      	b.n	8001c88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4619      	mov	r1, r3
 8001c78:	4610      	mov	r0, r2
 8001c7a:	f000 f8f8 	bl	8001e6e <TIM_ITRx_SetConfig>
      break;
 8001c7e:	e003      	b.n	8001c88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	73fb      	strb	r3, [r7, #15]
      break;
 8001c84:	e000      	b.n	8001c88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001c86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr

08001cc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr

08001cd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr
	...

08001cec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a2b      	ldr	r2, [pc, #172]	; (8001dac <TIM_Base_SetConfig+0xc0>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d007      	beq.n	8001d14 <TIM_Base_SetConfig+0x28>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d0a:	d003      	beq.n	8001d14 <TIM_Base_SetConfig+0x28>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a28      	ldr	r2, [pc, #160]	; (8001db0 <TIM_Base_SetConfig+0xc4>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d108      	bne.n	8001d26 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a20      	ldr	r2, [pc, #128]	; (8001dac <TIM_Base_SetConfig+0xc0>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d007      	beq.n	8001d3e <TIM_Base_SetConfig+0x52>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d34:	d003      	beq.n	8001d3e <TIM_Base_SetConfig+0x52>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a1d      	ldr	r2, [pc, #116]	; (8001db0 <TIM_Base_SetConfig+0xc4>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d108      	bne.n	8001d50 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a0d      	ldr	r2, [pc, #52]	; (8001dac <TIM_Base_SetConfig+0xc0>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d103      	bne.n	8001d84 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	691a      	ldr	r2, [r3, #16]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d005      	beq.n	8001da2 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	f023 0201 	bic.w	r2, r3, #1
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	611a      	str	r2, [r3, #16]
  }
}
 8001da2:	bf00      	nop
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr
 8001dac:	40012c00 	.word	0x40012c00
 8001db0:	40000400 	.word	0x40000400

08001db4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b087      	sub	sp, #28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
 8001dca:	f023 0201 	bic.w	r2, r3, #1
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	011b      	lsls	r3, r3, #4
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	f023 030a 	bic.w	r3, r3, #10
 8001df0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	621a      	str	r2, [r3, #32]
}
 8001e06:	bf00      	nop
 8001e08:	371c      	adds	r7, #28
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr

08001e10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b087      	sub	sp, #28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6a1b      	ldr	r3, [r3, #32]
 8001e26:	f023 0210 	bic.w	r2, r3, #16
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001e3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	031b      	lsls	r3, r3, #12
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001e4c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	011b      	lsls	r3, r3, #4
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	621a      	str	r2, [r3, #32]
}
 8001e64:	bf00      	nop
 8001e66:	371c      	adds	r7, #28
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bc80      	pop	{r7}
 8001e6c:	4770      	bx	lr

08001e6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b085      	sub	sp, #20
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	f043 0307 	orr.w	r3, r3, #7
 8001e90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	609a      	str	r2, [r3, #8]
}
 8001e98:	bf00      	nop
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	4770      	bx	lr

08001ea2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b087      	sub	sp, #28
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60f8      	str	r0, [r7, #12]
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ebc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	021a      	lsls	r2, r3, #8
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	609a      	str	r2, [r3, #8]
}
 8001ed6:	bf00      	nop
 8001ed8:	371c      	adds	r7, #28
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr

08001ee0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d101      	bne.n	8001ef8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	e041      	b.n	8001f7c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2202      	movs	r2, #2
 8001f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a14      	ldr	r2, [pc, #80]	; (8001f88 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d009      	beq.n	8001f50 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f44:	d004      	beq.n	8001f50 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a10      	ldr	r2, [pc, #64]	; (8001f8c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d10c      	bne.n	8001f6a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	68ba      	ldr	r2, [r7, #8]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68ba      	ldr	r2, [r7, #8]
 8001f68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3714      	adds	r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bc80      	pop	{r7}
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	40012c00 	.word	0x40012c00
 8001f8c:	40000400 	.word	0x40000400

08001f90 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr

08001fa2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e042      	b.n	800204c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d106      	bne.n	8001fe0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7fe fbaa 	bl	8000734 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2224      	movs	r2, #36	; 0x24
 8001fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68da      	ldr	r2, [r3, #12]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ff6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 f971 	bl	80022e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	691a      	ldr	r2, [r3, #16]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800200c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	695a      	ldr	r2, [r3, #20]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800201c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68da      	ldr	r2, [r3, #12]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800202c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2220      	movs	r2, #32
 8002038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2220      	movs	r2, #32
 8002040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08a      	sub	sp, #40	; 0x28
 8002058:	af02      	add	r7, sp, #8
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	603b      	str	r3, [r7, #0]
 8002060:	4613      	mov	r3, r2
 8002062:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b20      	cmp	r3, #32
 8002072:	d175      	bne.n	8002160 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d002      	beq.n	8002080 <HAL_UART_Transmit+0x2c>
 800207a:	88fb      	ldrh	r3, [r7, #6]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e06e      	b.n	8002162 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2200      	movs	r2, #0
 8002088:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2221      	movs	r2, #33	; 0x21
 800208e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002092:	f7fe fce1 	bl	8000a58 <HAL_GetTick>
 8002096:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	88fa      	ldrh	r2, [r7, #6]
 800209c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	88fa      	ldrh	r2, [r7, #6]
 80020a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020ac:	d108      	bne.n	80020c0 <HAL_UART_Transmit+0x6c>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d104      	bne.n	80020c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	61bb      	str	r3, [r7, #24]
 80020be:	e003      	b.n	80020c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80020c8:	e02e      	b.n	8002128 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	9300      	str	r3, [sp, #0]
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	2200      	movs	r2, #0
 80020d2:	2180      	movs	r1, #128	; 0x80
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	f000 f848 	bl	800216a <UART_WaitOnFlagUntilTimeout>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d005      	beq.n	80020ec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2220      	movs	r2, #32
 80020e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e03a      	b.n	8002162 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d10b      	bne.n	800210a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	881b      	ldrh	r3, [r3, #0]
 80020f6:	461a      	mov	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002100:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	3302      	adds	r3, #2
 8002106:	61bb      	str	r3, [r7, #24]
 8002108:	e007      	b.n	800211a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	781a      	ldrb	r2, [r3, #0]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	3301      	adds	r3, #1
 8002118:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800211e:	b29b      	uxth	r3, r3
 8002120:	3b01      	subs	r3, #1
 8002122:	b29a      	uxth	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800212c:	b29b      	uxth	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1cb      	bne.n	80020ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	9300      	str	r3, [sp, #0]
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	2200      	movs	r2, #0
 800213a:	2140      	movs	r1, #64	; 0x40
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f000 f814 	bl	800216a <UART_WaitOnFlagUntilTimeout>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d005      	beq.n	8002154 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2220      	movs	r2, #32
 800214c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e006      	b.n	8002162 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2220      	movs	r2, #32
 8002158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800215c:	2300      	movs	r3, #0
 800215e:	e000      	b.n	8002162 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002160:	2302      	movs	r3, #2
  }
}
 8002162:	4618      	mov	r0, r3
 8002164:	3720      	adds	r7, #32
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b086      	sub	sp, #24
 800216e:	af00      	add	r7, sp, #0
 8002170:	60f8      	str	r0, [r7, #12]
 8002172:	60b9      	str	r1, [r7, #8]
 8002174:	603b      	str	r3, [r7, #0]
 8002176:	4613      	mov	r3, r2
 8002178:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800217a:	e03b      	b.n	80021f4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800217c:	6a3b      	ldr	r3, [r7, #32]
 800217e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002182:	d037      	beq.n	80021f4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002184:	f7fe fc68 	bl	8000a58 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	6a3a      	ldr	r2, [r7, #32]
 8002190:	429a      	cmp	r2, r3
 8002192:	d302      	bcc.n	800219a <UART_WaitOnFlagUntilTimeout+0x30>
 8002194:	6a3b      	ldr	r3, [r7, #32]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e03a      	b.n	8002214 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	f003 0304 	and.w	r3, r3, #4
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d023      	beq.n	80021f4 <UART_WaitOnFlagUntilTimeout+0x8a>
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	2b80      	cmp	r3, #128	; 0x80
 80021b0:	d020      	beq.n	80021f4 <UART_WaitOnFlagUntilTimeout+0x8a>
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	2b40      	cmp	r3, #64	; 0x40
 80021b6:	d01d      	beq.n	80021f4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0308 	and.w	r3, r3, #8
 80021c2:	2b08      	cmp	r3, #8
 80021c4:	d116      	bne.n	80021f4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80021c6:	2300      	movs	r3, #0
 80021c8:	617b      	str	r3, [r7, #20]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	617b      	str	r3, [r7, #20]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	617b      	str	r3, [r7, #20]
 80021da:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f000 f81d 	bl	800221c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2208      	movs	r2, #8
 80021e6:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e00f      	b.n	8002214 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	4013      	ands	r3, r2
 80021fe:	68ba      	ldr	r2, [r7, #8]
 8002200:	429a      	cmp	r2, r3
 8002202:	bf0c      	ite	eq
 8002204:	2301      	moveq	r3, #1
 8002206:	2300      	movne	r3, #0
 8002208:	b2db      	uxtb	r3, r3
 800220a:	461a      	mov	r2, r3
 800220c:	79fb      	ldrb	r3, [r7, #7]
 800220e:	429a      	cmp	r2, r3
 8002210:	d0b4      	beq.n	800217c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3718      	adds	r7, #24
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800221c:	b480      	push	{r7}
 800221e:	b095      	sub	sp, #84	; 0x54
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	330c      	adds	r3, #12
 800222a:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800222c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800222e:	e853 3f00 	ldrex	r3, [r3]
 8002232:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002236:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800223a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	330c      	adds	r3, #12
 8002242:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002244:	643a      	str	r2, [r7, #64]	; 0x40
 8002246:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002248:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800224a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800224c:	e841 2300 	strex	r3, r2, [r1]
 8002250:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1e5      	bne.n	8002224 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	3314      	adds	r3, #20
 800225e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002260:	6a3b      	ldr	r3, [r7, #32]
 8002262:	e853 3f00 	ldrex	r3, [r3]
 8002266:	61fb      	str	r3, [r7, #28]
   return(result);
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	f023 0301 	bic.w	r3, r3, #1
 800226e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	3314      	adds	r3, #20
 8002276:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002278:	62fa      	str	r2, [r7, #44]	; 0x2c
 800227a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800227c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800227e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002280:	e841 2300 	strex	r3, r2, [r1]
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1e5      	bne.n	8002258 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002290:	2b01      	cmp	r3, #1
 8002292:	d119      	bne.n	80022c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	330c      	adds	r3, #12
 800229a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	e853 3f00 	ldrex	r3, [r3]
 80022a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	f023 0310 	bic.w	r3, r3, #16
 80022aa:	647b      	str	r3, [r7, #68]	; 0x44
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	330c      	adds	r3, #12
 80022b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80022b4:	61ba      	str	r2, [r7, #24]
 80022b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022b8:	6979      	ldr	r1, [r7, #20]
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	e841 2300 	strex	r3, r2, [r1]
 80022c0:	613b      	str	r3, [r7, #16]
   return(result);
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1e5      	bne.n	8002294 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2220      	movs	r2, #32
 80022cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80022d6:	bf00      	nop
 80022d8:	3754      	adds	r7, #84	; 0x54
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr

080022e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68da      	ldr	r2, [r3, #12]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689a      	ldr	r2, [r3, #8]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	431a      	orrs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	4313      	orrs	r3, r2
 800230e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800231a:	f023 030c 	bic.w	r3, r3, #12
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	6812      	ldr	r2, [r2, #0]
 8002322:	68b9      	ldr	r1, [r7, #8]
 8002324:	430b      	orrs	r3, r1
 8002326:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	699a      	ldr	r2, [r3, #24]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	430a      	orrs	r2, r1
 800233c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a2c      	ldr	r2, [pc, #176]	; (80023f4 <UART_SetConfig+0x114>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d103      	bne.n	8002350 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002348:	f7ff fa26 	bl	8001798 <HAL_RCC_GetPCLK2Freq>
 800234c:	60f8      	str	r0, [r7, #12]
 800234e:	e002      	b.n	8002356 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002350:	f7ff fa0e 	bl	8001770 <HAL_RCC_GetPCLK1Freq>
 8002354:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	4613      	mov	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	009a      	lsls	r2, r3, #2
 8002360:	441a      	add	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	fbb2 f3f3 	udiv	r3, r2, r3
 800236c:	4a22      	ldr	r2, [pc, #136]	; (80023f8 <UART_SetConfig+0x118>)
 800236e:	fba2 2303 	umull	r2, r3, r2, r3
 8002372:	095b      	lsrs	r3, r3, #5
 8002374:	0119      	lsls	r1, r3, #4
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	4613      	mov	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	009a      	lsls	r2, r3, #2
 8002380:	441a      	add	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	fbb2 f2f3 	udiv	r2, r2, r3
 800238c:	4b1a      	ldr	r3, [pc, #104]	; (80023f8 <UART_SetConfig+0x118>)
 800238e:	fba3 0302 	umull	r0, r3, r3, r2
 8002392:	095b      	lsrs	r3, r3, #5
 8002394:	2064      	movs	r0, #100	; 0x64
 8002396:	fb00 f303 	mul.w	r3, r0, r3
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	011b      	lsls	r3, r3, #4
 800239e:	3332      	adds	r3, #50	; 0x32
 80023a0:	4a15      	ldr	r2, [pc, #84]	; (80023f8 <UART_SetConfig+0x118>)
 80023a2:	fba2 2303 	umull	r2, r3, r2, r3
 80023a6:	095b      	lsrs	r3, r3, #5
 80023a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023ac:	4419      	add	r1, r3
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	4613      	mov	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4413      	add	r3, r2
 80023b6:	009a      	lsls	r2, r3, #2
 80023b8:	441a      	add	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80023c4:	4b0c      	ldr	r3, [pc, #48]	; (80023f8 <UART_SetConfig+0x118>)
 80023c6:	fba3 0302 	umull	r0, r3, r3, r2
 80023ca:	095b      	lsrs	r3, r3, #5
 80023cc:	2064      	movs	r0, #100	; 0x64
 80023ce:	fb00 f303 	mul.w	r3, r0, r3
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	011b      	lsls	r3, r3, #4
 80023d6:	3332      	adds	r3, #50	; 0x32
 80023d8:	4a07      	ldr	r2, [pc, #28]	; (80023f8 <UART_SetConfig+0x118>)
 80023da:	fba2 2303 	umull	r2, r3, r2, r3
 80023de:	095b      	lsrs	r3, r3, #5
 80023e0:	f003 020f 	and.w	r2, r3, #15
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	440a      	add	r2, r1
 80023ea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80023ec:	bf00      	nop
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40013800 	.word	0x40013800
 80023f8:	51eb851f 	.word	0x51eb851f

080023fc <__errno>:
 80023fc:	4b01      	ldr	r3, [pc, #4]	; (8002404 <__errno+0x8>)
 80023fe:	6818      	ldr	r0, [r3, #0]
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	2000000c 	.word	0x2000000c

08002408 <__libc_init_array>:
 8002408:	b570      	push	{r4, r5, r6, lr}
 800240a:	2600      	movs	r6, #0
 800240c:	4d0c      	ldr	r5, [pc, #48]	; (8002440 <__libc_init_array+0x38>)
 800240e:	4c0d      	ldr	r4, [pc, #52]	; (8002444 <__libc_init_array+0x3c>)
 8002410:	1b64      	subs	r4, r4, r5
 8002412:	10a4      	asrs	r4, r4, #2
 8002414:	42a6      	cmp	r6, r4
 8002416:	d109      	bne.n	800242c <__libc_init_array+0x24>
 8002418:	f000 fc5c 	bl	8002cd4 <_init>
 800241c:	2600      	movs	r6, #0
 800241e:	4d0a      	ldr	r5, [pc, #40]	; (8002448 <__libc_init_array+0x40>)
 8002420:	4c0a      	ldr	r4, [pc, #40]	; (800244c <__libc_init_array+0x44>)
 8002422:	1b64      	subs	r4, r4, r5
 8002424:	10a4      	asrs	r4, r4, #2
 8002426:	42a6      	cmp	r6, r4
 8002428:	d105      	bne.n	8002436 <__libc_init_array+0x2e>
 800242a:	bd70      	pop	{r4, r5, r6, pc}
 800242c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002430:	4798      	blx	r3
 8002432:	3601      	adds	r6, #1
 8002434:	e7ee      	b.n	8002414 <__libc_init_array+0xc>
 8002436:	f855 3b04 	ldr.w	r3, [r5], #4
 800243a:	4798      	blx	r3
 800243c:	3601      	adds	r6, #1
 800243e:	e7f2      	b.n	8002426 <__libc_init_array+0x1e>
 8002440:	08002d8c 	.word	0x08002d8c
 8002444:	08002d8c 	.word	0x08002d8c
 8002448:	08002d8c 	.word	0x08002d8c
 800244c:	08002d90 	.word	0x08002d90

08002450 <memset>:
 8002450:	4603      	mov	r3, r0
 8002452:	4402      	add	r2, r0
 8002454:	4293      	cmp	r3, r2
 8002456:	d100      	bne.n	800245a <memset+0xa>
 8002458:	4770      	bx	lr
 800245a:	f803 1b01 	strb.w	r1, [r3], #1
 800245e:	e7f9      	b.n	8002454 <memset+0x4>

08002460 <siprintf>:
 8002460:	b40e      	push	{r1, r2, r3}
 8002462:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002466:	b500      	push	{lr}
 8002468:	b09c      	sub	sp, #112	; 0x70
 800246a:	ab1d      	add	r3, sp, #116	; 0x74
 800246c:	9002      	str	r0, [sp, #8]
 800246e:	9006      	str	r0, [sp, #24]
 8002470:	9107      	str	r1, [sp, #28]
 8002472:	9104      	str	r1, [sp, #16]
 8002474:	4808      	ldr	r0, [pc, #32]	; (8002498 <siprintf+0x38>)
 8002476:	4909      	ldr	r1, [pc, #36]	; (800249c <siprintf+0x3c>)
 8002478:	f853 2b04 	ldr.w	r2, [r3], #4
 800247c:	9105      	str	r1, [sp, #20]
 800247e:	6800      	ldr	r0, [r0, #0]
 8002480:	a902      	add	r1, sp, #8
 8002482:	9301      	str	r3, [sp, #4]
 8002484:	f000 f868 	bl	8002558 <_svfiprintf_r>
 8002488:	2200      	movs	r2, #0
 800248a:	9b02      	ldr	r3, [sp, #8]
 800248c:	701a      	strb	r2, [r3, #0]
 800248e:	b01c      	add	sp, #112	; 0x70
 8002490:	f85d eb04 	ldr.w	lr, [sp], #4
 8002494:	b003      	add	sp, #12
 8002496:	4770      	bx	lr
 8002498:	2000000c 	.word	0x2000000c
 800249c:	ffff0208 	.word	0xffff0208

080024a0 <__ssputs_r>:
 80024a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024a4:	688e      	ldr	r6, [r1, #8]
 80024a6:	4682      	mov	sl, r0
 80024a8:	429e      	cmp	r6, r3
 80024aa:	460c      	mov	r4, r1
 80024ac:	4690      	mov	r8, r2
 80024ae:	461f      	mov	r7, r3
 80024b0:	d838      	bhi.n	8002524 <__ssputs_r+0x84>
 80024b2:	898a      	ldrh	r2, [r1, #12]
 80024b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80024b8:	d032      	beq.n	8002520 <__ssputs_r+0x80>
 80024ba:	6825      	ldr	r5, [r4, #0]
 80024bc:	6909      	ldr	r1, [r1, #16]
 80024be:	3301      	adds	r3, #1
 80024c0:	eba5 0901 	sub.w	r9, r5, r1
 80024c4:	6965      	ldr	r5, [r4, #20]
 80024c6:	444b      	add	r3, r9
 80024c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80024cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80024d0:	106d      	asrs	r5, r5, #1
 80024d2:	429d      	cmp	r5, r3
 80024d4:	bf38      	it	cc
 80024d6:	461d      	movcc	r5, r3
 80024d8:	0553      	lsls	r3, r2, #21
 80024da:	d531      	bpl.n	8002540 <__ssputs_r+0xa0>
 80024dc:	4629      	mov	r1, r5
 80024de:	f000 fb53 	bl	8002b88 <_malloc_r>
 80024e2:	4606      	mov	r6, r0
 80024e4:	b950      	cbnz	r0, 80024fc <__ssputs_r+0x5c>
 80024e6:	230c      	movs	r3, #12
 80024e8:	f04f 30ff 	mov.w	r0, #4294967295
 80024ec:	f8ca 3000 	str.w	r3, [sl]
 80024f0:	89a3      	ldrh	r3, [r4, #12]
 80024f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024f6:	81a3      	strh	r3, [r4, #12]
 80024f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024fc:	464a      	mov	r2, r9
 80024fe:	6921      	ldr	r1, [r4, #16]
 8002500:	f000 face 	bl	8002aa0 <memcpy>
 8002504:	89a3      	ldrh	r3, [r4, #12]
 8002506:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800250a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800250e:	81a3      	strh	r3, [r4, #12]
 8002510:	6126      	str	r6, [r4, #16]
 8002512:	444e      	add	r6, r9
 8002514:	6026      	str	r6, [r4, #0]
 8002516:	463e      	mov	r6, r7
 8002518:	6165      	str	r5, [r4, #20]
 800251a:	eba5 0509 	sub.w	r5, r5, r9
 800251e:	60a5      	str	r5, [r4, #8]
 8002520:	42be      	cmp	r6, r7
 8002522:	d900      	bls.n	8002526 <__ssputs_r+0x86>
 8002524:	463e      	mov	r6, r7
 8002526:	4632      	mov	r2, r6
 8002528:	4641      	mov	r1, r8
 800252a:	6820      	ldr	r0, [r4, #0]
 800252c:	f000 fac6 	bl	8002abc <memmove>
 8002530:	68a3      	ldr	r3, [r4, #8]
 8002532:	6822      	ldr	r2, [r4, #0]
 8002534:	1b9b      	subs	r3, r3, r6
 8002536:	4432      	add	r2, r6
 8002538:	2000      	movs	r0, #0
 800253a:	60a3      	str	r3, [r4, #8]
 800253c:	6022      	str	r2, [r4, #0]
 800253e:	e7db      	b.n	80024f8 <__ssputs_r+0x58>
 8002540:	462a      	mov	r2, r5
 8002542:	f000 fb7b 	bl	8002c3c <_realloc_r>
 8002546:	4606      	mov	r6, r0
 8002548:	2800      	cmp	r0, #0
 800254a:	d1e1      	bne.n	8002510 <__ssputs_r+0x70>
 800254c:	4650      	mov	r0, sl
 800254e:	6921      	ldr	r1, [r4, #16]
 8002550:	f000 face 	bl	8002af0 <_free_r>
 8002554:	e7c7      	b.n	80024e6 <__ssputs_r+0x46>
	...

08002558 <_svfiprintf_r>:
 8002558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800255c:	4698      	mov	r8, r3
 800255e:	898b      	ldrh	r3, [r1, #12]
 8002560:	4607      	mov	r7, r0
 8002562:	061b      	lsls	r3, r3, #24
 8002564:	460d      	mov	r5, r1
 8002566:	4614      	mov	r4, r2
 8002568:	b09d      	sub	sp, #116	; 0x74
 800256a:	d50e      	bpl.n	800258a <_svfiprintf_r+0x32>
 800256c:	690b      	ldr	r3, [r1, #16]
 800256e:	b963      	cbnz	r3, 800258a <_svfiprintf_r+0x32>
 8002570:	2140      	movs	r1, #64	; 0x40
 8002572:	f000 fb09 	bl	8002b88 <_malloc_r>
 8002576:	6028      	str	r0, [r5, #0]
 8002578:	6128      	str	r0, [r5, #16]
 800257a:	b920      	cbnz	r0, 8002586 <_svfiprintf_r+0x2e>
 800257c:	230c      	movs	r3, #12
 800257e:	603b      	str	r3, [r7, #0]
 8002580:	f04f 30ff 	mov.w	r0, #4294967295
 8002584:	e0d1      	b.n	800272a <_svfiprintf_r+0x1d2>
 8002586:	2340      	movs	r3, #64	; 0x40
 8002588:	616b      	str	r3, [r5, #20]
 800258a:	2300      	movs	r3, #0
 800258c:	9309      	str	r3, [sp, #36]	; 0x24
 800258e:	2320      	movs	r3, #32
 8002590:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002594:	2330      	movs	r3, #48	; 0x30
 8002596:	f04f 0901 	mov.w	r9, #1
 800259a:	f8cd 800c 	str.w	r8, [sp, #12]
 800259e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002744 <_svfiprintf_r+0x1ec>
 80025a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80025a6:	4623      	mov	r3, r4
 80025a8:	469a      	mov	sl, r3
 80025aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80025ae:	b10a      	cbz	r2, 80025b4 <_svfiprintf_r+0x5c>
 80025b0:	2a25      	cmp	r2, #37	; 0x25
 80025b2:	d1f9      	bne.n	80025a8 <_svfiprintf_r+0x50>
 80025b4:	ebba 0b04 	subs.w	fp, sl, r4
 80025b8:	d00b      	beq.n	80025d2 <_svfiprintf_r+0x7a>
 80025ba:	465b      	mov	r3, fp
 80025bc:	4622      	mov	r2, r4
 80025be:	4629      	mov	r1, r5
 80025c0:	4638      	mov	r0, r7
 80025c2:	f7ff ff6d 	bl	80024a0 <__ssputs_r>
 80025c6:	3001      	adds	r0, #1
 80025c8:	f000 80aa 	beq.w	8002720 <_svfiprintf_r+0x1c8>
 80025cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80025ce:	445a      	add	r2, fp
 80025d0:	9209      	str	r2, [sp, #36]	; 0x24
 80025d2:	f89a 3000 	ldrb.w	r3, [sl]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f000 80a2 	beq.w	8002720 <_svfiprintf_r+0x1c8>
 80025dc:	2300      	movs	r3, #0
 80025de:	f04f 32ff 	mov.w	r2, #4294967295
 80025e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80025e6:	f10a 0a01 	add.w	sl, sl, #1
 80025ea:	9304      	str	r3, [sp, #16]
 80025ec:	9307      	str	r3, [sp, #28]
 80025ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80025f2:	931a      	str	r3, [sp, #104]	; 0x68
 80025f4:	4654      	mov	r4, sl
 80025f6:	2205      	movs	r2, #5
 80025f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025fc:	4851      	ldr	r0, [pc, #324]	; (8002744 <_svfiprintf_r+0x1ec>)
 80025fe:	f000 fa41 	bl	8002a84 <memchr>
 8002602:	9a04      	ldr	r2, [sp, #16]
 8002604:	b9d8      	cbnz	r0, 800263e <_svfiprintf_r+0xe6>
 8002606:	06d0      	lsls	r0, r2, #27
 8002608:	bf44      	itt	mi
 800260a:	2320      	movmi	r3, #32
 800260c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002610:	0711      	lsls	r1, r2, #28
 8002612:	bf44      	itt	mi
 8002614:	232b      	movmi	r3, #43	; 0x2b
 8002616:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800261a:	f89a 3000 	ldrb.w	r3, [sl]
 800261e:	2b2a      	cmp	r3, #42	; 0x2a
 8002620:	d015      	beq.n	800264e <_svfiprintf_r+0xf6>
 8002622:	4654      	mov	r4, sl
 8002624:	2000      	movs	r0, #0
 8002626:	f04f 0c0a 	mov.w	ip, #10
 800262a:	9a07      	ldr	r2, [sp, #28]
 800262c:	4621      	mov	r1, r4
 800262e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002632:	3b30      	subs	r3, #48	; 0x30
 8002634:	2b09      	cmp	r3, #9
 8002636:	d94e      	bls.n	80026d6 <_svfiprintf_r+0x17e>
 8002638:	b1b0      	cbz	r0, 8002668 <_svfiprintf_r+0x110>
 800263a:	9207      	str	r2, [sp, #28]
 800263c:	e014      	b.n	8002668 <_svfiprintf_r+0x110>
 800263e:	eba0 0308 	sub.w	r3, r0, r8
 8002642:	fa09 f303 	lsl.w	r3, r9, r3
 8002646:	4313      	orrs	r3, r2
 8002648:	46a2      	mov	sl, r4
 800264a:	9304      	str	r3, [sp, #16]
 800264c:	e7d2      	b.n	80025f4 <_svfiprintf_r+0x9c>
 800264e:	9b03      	ldr	r3, [sp, #12]
 8002650:	1d19      	adds	r1, r3, #4
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	9103      	str	r1, [sp, #12]
 8002656:	2b00      	cmp	r3, #0
 8002658:	bfbb      	ittet	lt
 800265a:	425b      	neglt	r3, r3
 800265c:	f042 0202 	orrlt.w	r2, r2, #2
 8002660:	9307      	strge	r3, [sp, #28]
 8002662:	9307      	strlt	r3, [sp, #28]
 8002664:	bfb8      	it	lt
 8002666:	9204      	strlt	r2, [sp, #16]
 8002668:	7823      	ldrb	r3, [r4, #0]
 800266a:	2b2e      	cmp	r3, #46	; 0x2e
 800266c:	d10c      	bne.n	8002688 <_svfiprintf_r+0x130>
 800266e:	7863      	ldrb	r3, [r4, #1]
 8002670:	2b2a      	cmp	r3, #42	; 0x2a
 8002672:	d135      	bne.n	80026e0 <_svfiprintf_r+0x188>
 8002674:	9b03      	ldr	r3, [sp, #12]
 8002676:	3402      	adds	r4, #2
 8002678:	1d1a      	adds	r2, r3, #4
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	9203      	str	r2, [sp, #12]
 800267e:	2b00      	cmp	r3, #0
 8002680:	bfb8      	it	lt
 8002682:	f04f 33ff 	movlt.w	r3, #4294967295
 8002686:	9305      	str	r3, [sp, #20]
 8002688:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002754 <_svfiprintf_r+0x1fc>
 800268c:	2203      	movs	r2, #3
 800268e:	4650      	mov	r0, sl
 8002690:	7821      	ldrb	r1, [r4, #0]
 8002692:	f000 f9f7 	bl	8002a84 <memchr>
 8002696:	b140      	cbz	r0, 80026aa <_svfiprintf_r+0x152>
 8002698:	2340      	movs	r3, #64	; 0x40
 800269a:	eba0 000a 	sub.w	r0, r0, sl
 800269e:	fa03 f000 	lsl.w	r0, r3, r0
 80026a2:	9b04      	ldr	r3, [sp, #16]
 80026a4:	3401      	adds	r4, #1
 80026a6:	4303      	orrs	r3, r0
 80026a8:	9304      	str	r3, [sp, #16]
 80026aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80026ae:	2206      	movs	r2, #6
 80026b0:	4825      	ldr	r0, [pc, #148]	; (8002748 <_svfiprintf_r+0x1f0>)
 80026b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80026b6:	f000 f9e5 	bl	8002a84 <memchr>
 80026ba:	2800      	cmp	r0, #0
 80026bc:	d038      	beq.n	8002730 <_svfiprintf_r+0x1d8>
 80026be:	4b23      	ldr	r3, [pc, #140]	; (800274c <_svfiprintf_r+0x1f4>)
 80026c0:	bb1b      	cbnz	r3, 800270a <_svfiprintf_r+0x1b2>
 80026c2:	9b03      	ldr	r3, [sp, #12]
 80026c4:	3307      	adds	r3, #7
 80026c6:	f023 0307 	bic.w	r3, r3, #7
 80026ca:	3308      	adds	r3, #8
 80026cc:	9303      	str	r3, [sp, #12]
 80026ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80026d0:	4433      	add	r3, r6
 80026d2:	9309      	str	r3, [sp, #36]	; 0x24
 80026d4:	e767      	b.n	80025a6 <_svfiprintf_r+0x4e>
 80026d6:	460c      	mov	r4, r1
 80026d8:	2001      	movs	r0, #1
 80026da:	fb0c 3202 	mla	r2, ip, r2, r3
 80026de:	e7a5      	b.n	800262c <_svfiprintf_r+0xd4>
 80026e0:	2300      	movs	r3, #0
 80026e2:	f04f 0c0a 	mov.w	ip, #10
 80026e6:	4619      	mov	r1, r3
 80026e8:	3401      	adds	r4, #1
 80026ea:	9305      	str	r3, [sp, #20]
 80026ec:	4620      	mov	r0, r4
 80026ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80026f2:	3a30      	subs	r2, #48	; 0x30
 80026f4:	2a09      	cmp	r2, #9
 80026f6:	d903      	bls.n	8002700 <_svfiprintf_r+0x1a8>
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0c5      	beq.n	8002688 <_svfiprintf_r+0x130>
 80026fc:	9105      	str	r1, [sp, #20]
 80026fe:	e7c3      	b.n	8002688 <_svfiprintf_r+0x130>
 8002700:	4604      	mov	r4, r0
 8002702:	2301      	movs	r3, #1
 8002704:	fb0c 2101 	mla	r1, ip, r1, r2
 8002708:	e7f0      	b.n	80026ec <_svfiprintf_r+0x194>
 800270a:	ab03      	add	r3, sp, #12
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	462a      	mov	r2, r5
 8002710:	4638      	mov	r0, r7
 8002712:	4b0f      	ldr	r3, [pc, #60]	; (8002750 <_svfiprintf_r+0x1f8>)
 8002714:	a904      	add	r1, sp, #16
 8002716:	f3af 8000 	nop.w
 800271a:	1c42      	adds	r2, r0, #1
 800271c:	4606      	mov	r6, r0
 800271e:	d1d6      	bne.n	80026ce <_svfiprintf_r+0x176>
 8002720:	89ab      	ldrh	r3, [r5, #12]
 8002722:	065b      	lsls	r3, r3, #25
 8002724:	f53f af2c 	bmi.w	8002580 <_svfiprintf_r+0x28>
 8002728:	9809      	ldr	r0, [sp, #36]	; 0x24
 800272a:	b01d      	add	sp, #116	; 0x74
 800272c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002730:	ab03      	add	r3, sp, #12
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	462a      	mov	r2, r5
 8002736:	4638      	mov	r0, r7
 8002738:	4b05      	ldr	r3, [pc, #20]	; (8002750 <_svfiprintf_r+0x1f8>)
 800273a:	a904      	add	r1, sp, #16
 800273c:	f000 f87c 	bl	8002838 <_printf_i>
 8002740:	e7eb      	b.n	800271a <_svfiprintf_r+0x1c2>
 8002742:	bf00      	nop
 8002744:	08002d56 	.word	0x08002d56
 8002748:	08002d60 	.word	0x08002d60
 800274c:	00000000 	.word	0x00000000
 8002750:	080024a1 	.word	0x080024a1
 8002754:	08002d5c 	.word	0x08002d5c

08002758 <_printf_common>:
 8002758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800275c:	4616      	mov	r6, r2
 800275e:	4699      	mov	r9, r3
 8002760:	688a      	ldr	r2, [r1, #8]
 8002762:	690b      	ldr	r3, [r1, #16]
 8002764:	4607      	mov	r7, r0
 8002766:	4293      	cmp	r3, r2
 8002768:	bfb8      	it	lt
 800276a:	4613      	movlt	r3, r2
 800276c:	6033      	str	r3, [r6, #0]
 800276e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002772:	460c      	mov	r4, r1
 8002774:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002778:	b10a      	cbz	r2, 800277e <_printf_common+0x26>
 800277a:	3301      	adds	r3, #1
 800277c:	6033      	str	r3, [r6, #0]
 800277e:	6823      	ldr	r3, [r4, #0]
 8002780:	0699      	lsls	r1, r3, #26
 8002782:	bf42      	ittt	mi
 8002784:	6833      	ldrmi	r3, [r6, #0]
 8002786:	3302      	addmi	r3, #2
 8002788:	6033      	strmi	r3, [r6, #0]
 800278a:	6825      	ldr	r5, [r4, #0]
 800278c:	f015 0506 	ands.w	r5, r5, #6
 8002790:	d106      	bne.n	80027a0 <_printf_common+0x48>
 8002792:	f104 0a19 	add.w	sl, r4, #25
 8002796:	68e3      	ldr	r3, [r4, #12]
 8002798:	6832      	ldr	r2, [r6, #0]
 800279a:	1a9b      	subs	r3, r3, r2
 800279c:	42ab      	cmp	r3, r5
 800279e:	dc28      	bgt.n	80027f2 <_printf_common+0x9a>
 80027a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80027a4:	1e13      	subs	r3, r2, #0
 80027a6:	6822      	ldr	r2, [r4, #0]
 80027a8:	bf18      	it	ne
 80027aa:	2301      	movne	r3, #1
 80027ac:	0692      	lsls	r2, r2, #26
 80027ae:	d42d      	bmi.n	800280c <_printf_common+0xb4>
 80027b0:	4649      	mov	r1, r9
 80027b2:	4638      	mov	r0, r7
 80027b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80027b8:	47c0      	blx	r8
 80027ba:	3001      	adds	r0, #1
 80027bc:	d020      	beq.n	8002800 <_printf_common+0xa8>
 80027be:	6823      	ldr	r3, [r4, #0]
 80027c0:	68e5      	ldr	r5, [r4, #12]
 80027c2:	f003 0306 	and.w	r3, r3, #6
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	bf18      	it	ne
 80027ca:	2500      	movne	r5, #0
 80027cc:	6832      	ldr	r2, [r6, #0]
 80027ce:	f04f 0600 	mov.w	r6, #0
 80027d2:	68a3      	ldr	r3, [r4, #8]
 80027d4:	bf08      	it	eq
 80027d6:	1aad      	subeq	r5, r5, r2
 80027d8:	6922      	ldr	r2, [r4, #16]
 80027da:	bf08      	it	eq
 80027dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80027e0:	4293      	cmp	r3, r2
 80027e2:	bfc4      	itt	gt
 80027e4:	1a9b      	subgt	r3, r3, r2
 80027e6:	18ed      	addgt	r5, r5, r3
 80027e8:	341a      	adds	r4, #26
 80027ea:	42b5      	cmp	r5, r6
 80027ec:	d11a      	bne.n	8002824 <_printf_common+0xcc>
 80027ee:	2000      	movs	r0, #0
 80027f0:	e008      	b.n	8002804 <_printf_common+0xac>
 80027f2:	2301      	movs	r3, #1
 80027f4:	4652      	mov	r2, sl
 80027f6:	4649      	mov	r1, r9
 80027f8:	4638      	mov	r0, r7
 80027fa:	47c0      	blx	r8
 80027fc:	3001      	adds	r0, #1
 80027fe:	d103      	bne.n	8002808 <_printf_common+0xb0>
 8002800:	f04f 30ff 	mov.w	r0, #4294967295
 8002804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002808:	3501      	adds	r5, #1
 800280a:	e7c4      	b.n	8002796 <_printf_common+0x3e>
 800280c:	2030      	movs	r0, #48	; 0x30
 800280e:	18e1      	adds	r1, r4, r3
 8002810:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002814:	1c5a      	adds	r2, r3, #1
 8002816:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800281a:	4422      	add	r2, r4
 800281c:	3302      	adds	r3, #2
 800281e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002822:	e7c5      	b.n	80027b0 <_printf_common+0x58>
 8002824:	2301      	movs	r3, #1
 8002826:	4622      	mov	r2, r4
 8002828:	4649      	mov	r1, r9
 800282a:	4638      	mov	r0, r7
 800282c:	47c0      	blx	r8
 800282e:	3001      	adds	r0, #1
 8002830:	d0e6      	beq.n	8002800 <_printf_common+0xa8>
 8002832:	3601      	adds	r6, #1
 8002834:	e7d9      	b.n	80027ea <_printf_common+0x92>
	...

08002838 <_printf_i>:
 8002838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800283c:	460c      	mov	r4, r1
 800283e:	7e27      	ldrb	r7, [r4, #24]
 8002840:	4691      	mov	r9, r2
 8002842:	2f78      	cmp	r7, #120	; 0x78
 8002844:	4680      	mov	r8, r0
 8002846:	469a      	mov	sl, r3
 8002848:	990c      	ldr	r1, [sp, #48]	; 0x30
 800284a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800284e:	d807      	bhi.n	8002860 <_printf_i+0x28>
 8002850:	2f62      	cmp	r7, #98	; 0x62
 8002852:	d80a      	bhi.n	800286a <_printf_i+0x32>
 8002854:	2f00      	cmp	r7, #0
 8002856:	f000 80d9 	beq.w	8002a0c <_printf_i+0x1d4>
 800285a:	2f58      	cmp	r7, #88	; 0x58
 800285c:	f000 80a4 	beq.w	80029a8 <_printf_i+0x170>
 8002860:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002864:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002868:	e03a      	b.n	80028e0 <_printf_i+0xa8>
 800286a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800286e:	2b15      	cmp	r3, #21
 8002870:	d8f6      	bhi.n	8002860 <_printf_i+0x28>
 8002872:	a001      	add	r0, pc, #4	; (adr r0, 8002878 <_printf_i+0x40>)
 8002874:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002878:	080028d1 	.word	0x080028d1
 800287c:	080028e5 	.word	0x080028e5
 8002880:	08002861 	.word	0x08002861
 8002884:	08002861 	.word	0x08002861
 8002888:	08002861 	.word	0x08002861
 800288c:	08002861 	.word	0x08002861
 8002890:	080028e5 	.word	0x080028e5
 8002894:	08002861 	.word	0x08002861
 8002898:	08002861 	.word	0x08002861
 800289c:	08002861 	.word	0x08002861
 80028a0:	08002861 	.word	0x08002861
 80028a4:	080029f3 	.word	0x080029f3
 80028a8:	08002915 	.word	0x08002915
 80028ac:	080029d5 	.word	0x080029d5
 80028b0:	08002861 	.word	0x08002861
 80028b4:	08002861 	.word	0x08002861
 80028b8:	08002a15 	.word	0x08002a15
 80028bc:	08002861 	.word	0x08002861
 80028c0:	08002915 	.word	0x08002915
 80028c4:	08002861 	.word	0x08002861
 80028c8:	08002861 	.word	0x08002861
 80028cc:	080029dd 	.word	0x080029dd
 80028d0:	680b      	ldr	r3, [r1, #0]
 80028d2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80028d6:	1d1a      	adds	r2, r3, #4
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	600a      	str	r2, [r1, #0]
 80028dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80028e0:	2301      	movs	r3, #1
 80028e2:	e0a4      	b.n	8002a2e <_printf_i+0x1f6>
 80028e4:	6825      	ldr	r5, [r4, #0]
 80028e6:	6808      	ldr	r0, [r1, #0]
 80028e8:	062e      	lsls	r6, r5, #24
 80028ea:	f100 0304 	add.w	r3, r0, #4
 80028ee:	d50a      	bpl.n	8002906 <_printf_i+0xce>
 80028f0:	6805      	ldr	r5, [r0, #0]
 80028f2:	600b      	str	r3, [r1, #0]
 80028f4:	2d00      	cmp	r5, #0
 80028f6:	da03      	bge.n	8002900 <_printf_i+0xc8>
 80028f8:	232d      	movs	r3, #45	; 0x2d
 80028fa:	426d      	negs	r5, r5
 80028fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002900:	230a      	movs	r3, #10
 8002902:	485e      	ldr	r0, [pc, #376]	; (8002a7c <_printf_i+0x244>)
 8002904:	e019      	b.n	800293a <_printf_i+0x102>
 8002906:	f015 0f40 	tst.w	r5, #64	; 0x40
 800290a:	6805      	ldr	r5, [r0, #0]
 800290c:	600b      	str	r3, [r1, #0]
 800290e:	bf18      	it	ne
 8002910:	b22d      	sxthne	r5, r5
 8002912:	e7ef      	b.n	80028f4 <_printf_i+0xbc>
 8002914:	680b      	ldr	r3, [r1, #0]
 8002916:	6825      	ldr	r5, [r4, #0]
 8002918:	1d18      	adds	r0, r3, #4
 800291a:	6008      	str	r0, [r1, #0]
 800291c:	0628      	lsls	r0, r5, #24
 800291e:	d501      	bpl.n	8002924 <_printf_i+0xec>
 8002920:	681d      	ldr	r5, [r3, #0]
 8002922:	e002      	b.n	800292a <_printf_i+0xf2>
 8002924:	0669      	lsls	r1, r5, #25
 8002926:	d5fb      	bpl.n	8002920 <_printf_i+0xe8>
 8002928:	881d      	ldrh	r5, [r3, #0]
 800292a:	2f6f      	cmp	r7, #111	; 0x6f
 800292c:	bf0c      	ite	eq
 800292e:	2308      	moveq	r3, #8
 8002930:	230a      	movne	r3, #10
 8002932:	4852      	ldr	r0, [pc, #328]	; (8002a7c <_printf_i+0x244>)
 8002934:	2100      	movs	r1, #0
 8002936:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800293a:	6866      	ldr	r6, [r4, #4]
 800293c:	2e00      	cmp	r6, #0
 800293e:	bfa8      	it	ge
 8002940:	6821      	ldrge	r1, [r4, #0]
 8002942:	60a6      	str	r6, [r4, #8]
 8002944:	bfa4      	itt	ge
 8002946:	f021 0104 	bicge.w	r1, r1, #4
 800294a:	6021      	strge	r1, [r4, #0]
 800294c:	b90d      	cbnz	r5, 8002952 <_printf_i+0x11a>
 800294e:	2e00      	cmp	r6, #0
 8002950:	d04d      	beq.n	80029ee <_printf_i+0x1b6>
 8002952:	4616      	mov	r6, r2
 8002954:	fbb5 f1f3 	udiv	r1, r5, r3
 8002958:	fb03 5711 	mls	r7, r3, r1, r5
 800295c:	5dc7      	ldrb	r7, [r0, r7]
 800295e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002962:	462f      	mov	r7, r5
 8002964:	42bb      	cmp	r3, r7
 8002966:	460d      	mov	r5, r1
 8002968:	d9f4      	bls.n	8002954 <_printf_i+0x11c>
 800296a:	2b08      	cmp	r3, #8
 800296c:	d10b      	bne.n	8002986 <_printf_i+0x14e>
 800296e:	6823      	ldr	r3, [r4, #0]
 8002970:	07df      	lsls	r7, r3, #31
 8002972:	d508      	bpl.n	8002986 <_printf_i+0x14e>
 8002974:	6923      	ldr	r3, [r4, #16]
 8002976:	6861      	ldr	r1, [r4, #4]
 8002978:	4299      	cmp	r1, r3
 800297a:	bfde      	ittt	le
 800297c:	2330      	movle	r3, #48	; 0x30
 800297e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002982:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002986:	1b92      	subs	r2, r2, r6
 8002988:	6122      	str	r2, [r4, #16]
 800298a:	464b      	mov	r3, r9
 800298c:	4621      	mov	r1, r4
 800298e:	4640      	mov	r0, r8
 8002990:	f8cd a000 	str.w	sl, [sp]
 8002994:	aa03      	add	r2, sp, #12
 8002996:	f7ff fedf 	bl	8002758 <_printf_common>
 800299a:	3001      	adds	r0, #1
 800299c:	d14c      	bne.n	8002a38 <_printf_i+0x200>
 800299e:	f04f 30ff 	mov.w	r0, #4294967295
 80029a2:	b004      	add	sp, #16
 80029a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029a8:	4834      	ldr	r0, [pc, #208]	; (8002a7c <_printf_i+0x244>)
 80029aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80029ae:	680e      	ldr	r6, [r1, #0]
 80029b0:	6823      	ldr	r3, [r4, #0]
 80029b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80029b6:	061f      	lsls	r7, r3, #24
 80029b8:	600e      	str	r6, [r1, #0]
 80029ba:	d514      	bpl.n	80029e6 <_printf_i+0x1ae>
 80029bc:	07d9      	lsls	r1, r3, #31
 80029be:	bf44      	itt	mi
 80029c0:	f043 0320 	orrmi.w	r3, r3, #32
 80029c4:	6023      	strmi	r3, [r4, #0]
 80029c6:	b91d      	cbnz	r5, 80029d0 <_printf_i+0x198>
 80029c8:	6823      	ldr	r3, [r4, #0]
 80029ca:	f023 0320 	bic.w	r3, r3, #32
 80029ce:	6023      	str	r3, [r4, #0]
 80029d0:	2310      	movs	r3, #16
 80029d2:	e7af      	b.n	8002934 <_printf_i+0xfc>
 80029d4:	6823      	ldr	r3, [r4, #0]
 80029d6:	f043 0320 	orr.w	r3, r3, #32
 80029da:	6023      	str	r3, [r4, #0]
 80029dc:	2378      	movs	r3, #120	; 0x78
 80029de:	4828      	ldr	r0, [pc, #160]	; (8002a80 <_printf_i+0x248>)
 80029e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80029e4:	e7e3      	b.n	80029ae <_printf_i+0x176>
 80029e6:	065e      	lsls	r6, r3, #25
 80029e8:	bf48      	it	mi
 80029ea:	b2ad      	uxthmi	r5, r5
 80029ec:	e7e6      	b.n	80029bc <_printf_i+0x184>
 80029ee:	4616      	mov	r6, r2
 80029f0:	e7bb      	b.n	800296a <_printf_i+0x132>
 80029f2:	680b      	ldr	r3, [r1, #0]
 80029f4:	6826      	ldr	r6, [r4, #0]
 80029f6:	1d1d      	adds	r5, r3, #4
 80029f8:	6960      	ldr	r0, [r4, #20]
 80029fa:	600d      	str	r5, [r1, #0]
 80029fc:	0635      	lsls	r5, r6, #24
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	d501      	bpl.n	8002a06 <_printf_i+0x1ce>
 8002a02:	6018      	str	r0, [r3, #0]
 8002a04:	e002      	b.n	8002a0c <_printf_i+0x1d4>
 8002a06:	0671      	lsls	r1, r6, #25
 8002a08:	d5fb      	bpl.n	8002a02 <_printf_i+0x1ca>
 8002a0a:	8018      	strh	r0, [r3, #0]
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	4616      	mov	r6, r2
 8002a10:	6123      	str	r3, [r4, #16]
 8002a12:	e7ba      	b.n	800298a <_printf_i+0x152>
 8002a14:	680b      	ldr	r3, [r1, #0]
 8002a16:	1d1a      	adds	r2, r3, #4
 8002a18:	600a      	str	r2, [r1, #0]
 8002a1a:	681e      	ldr	r6, [r3, #0]
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	4630      	mov	r0, r6
 8002a20:	6862      	ldr	r2, [r4, #4]
 8002a22:	f000 f82f 	bl	8002a84 <memchr>
 8002a26:	b108      	cbz	r0, 8002a2c <_printf_i+0x1f4>
 8002a28:	1b80      	subs	r0, r0, r6
 8002a2a:	6060      	str	r0, [r4, #4]
 8002a2c:	6863      	ldr	r3, [r4, #4]
 8002a2e:	6123      	str	r3, [r4, #16]
 8002a30:	2300      	movs	r3, #0
 8002a32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a36:	e7a8      	b.n	800298a <_printf_i+0x152>
 8002a38:	4632      	mov	r2, r6
 8002a3a:	4649      	mov	r1, r9
 8002a3c:	4640      	mov	r0, r8
 8002a3e:	6923      	ldr	r3, [r4, #16]
 8002a40:	47d0      	blx	sl
 8002a42:	3001      	adds	r0, #1
 8002a44:	d0ab      	beq.n	800299e <_printf_i+0x166>
 8002a46:	6823      	ldr	r3, [r4, #0]
 8002a48:	079b      	lsls	r3, r3, #30
 8002a4a:	d413      	bmi.n	8002a74 <_printf_i+0x23c>
 8002a4c:	68e0      	ldr	r0, [r4, #12]
 8002a4e:	9b03      	ldr	r3, [sp, #12]
 8002a50:	4298      	cmp	r0, r3
 8002a52:	bfb8      	it	lt
 8002a54:	4618      	movlt	r0, r3
 8002a56:	e7a4      	b.n	80029a2 <_printf_i+0x16a>
 8002a58:	2301      	movs	r3, #1
 8002a5a:	4632      	mov	r2, r6
 8002a5c:	4649      	mov	r1, r9
 8002a5e:	4640      	mov	r0, r8
 8002a60:	47d0      	blx	sl
 8002a62:	3001      	adds	r0, #1
 8002a64:	d09b      	beq.n	800299e <_printf_i+0x166>
 8002a66:	3501      	adds	r5, #1
 8002a68:	68e3      	ldr	r3, [r4, #12]
 8002a6a:	9903      	ldr	r1, [sp, #12]
 8002a6c:	1a5b      	subs	r3, r3, r1
 8002a6e:	42ab      	cmp	r3, r5
 8002a70:	dcf2      	bgt.n	8002a58 <_printf_i+0x220>
 8002a72:	e7eb      	b.n	8002a4c <_printf_i+0x214>
 8002a74:	2500      	movs	r5, #0
 8002a76:	f104 0619 	add.w	r6, r4, #25
 8002a7a:	e7f5      	b.n	8002a68 <_printf_i+0x230>
 8002a7c:	08002d67 	.word	0x08002d67
 8002a80:	08002d78 	.word	0x08002d78

08002a84 <memchr>:
 8002a84:	4603      	mov	r3, r0
 8002a86:	b510      	push	{r4, lr}
 8002a88:	b2c9      	uxtb	r1, r1
 8002a8a:	4402      	add	r2, r0
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	4618      	mov	r0, r3
 8002a90:	d101      	bne.n	8002a96 <memchr+0x12>
 8002a92:	2000      	movs	r0, #0
 8002a94:	e003      	b.n	8002a9e <memchr+0x1a>
 8002a96:	7804      	ldrb	r4, [r0, #0]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	428c      	cmp	r4, r1
 8002a9c:	d1f6      	bne.n	8002a8c <memchr+0x8>
 8002a9e:	bd10      	pop	{r4, pc}

08002aa0 <memcpy>:
 8002aa0:	440a      	add	r2, r1
 8002aa2:	4291      	cmp	r1, r2
 8002aa4:	f100 33ff 	add.w	r3, r0, #4294967295
 8002aa8:	d100      	bne.n	8002aac <memcpy+0xc>
 8002aaa:	4770      	bx	lr
 8002aac:	b510      	push	{r4, lr}
 8002aae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002ab2:	4291      	cmp	r1, r2
 8002ab4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002ab8:	d1f9      	bne.n	8002aae <memcpy+0xe>
 8002aba:	bd10      	pop	{r4, pc}

08002abc <memmove>:
 8002abc:	4288      	cmp	r0, r1
 8002abe:	b510      	push	{r4, lr}
 8002ac0:	eb01 0402 	add.w	r4, r1, r2
 8002ac4:	d902      	bls.n	8002acc <memmove+0x10>
 8002ac6:	4284      	cmp	r4, r0
 8002ac8:	4623      	mov	r3, r4
 8002aca:	d807      	bhi.n	8002adc <memmove+0x20>
 8002acc:	1e43      	subs	r3, r0, #1
 8002ace:	42a1      	cmp	r1, r4
 8002ad0:	d008      	beq.n	8002ae4 <memmove+0x28>
 8002ad2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002ad6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002ada:	e7f8      	b.n	8002ace <memmove+0x12>
 8002adc:	4601      	mov	r1, r0
 8002ade:	4402      	add	r2, r0
 8002ae0:	428a      	cmp	r2, r1
 8002ae2:	d100      	bne.n	8002ae6 <memmove+0x2a>
 8002ae4:	bd10      	pop	{r4, pc}
 8002ae6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002aea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002aee:	e7f7      	b.n	8002ae0 <memmove+0x24>

08002af0 <_free_r>:
 8002af0:	b538      	push	{r3, r4, r5, lr}
 8002af2:	4605      	mov	r5, r0
 8002af4:	2900      	cmp	r1, #0
 8002af6:	d043      	beq.n	8002b80 <_free_r+0x90>
 8002af8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002afc:	1f0c      	subs	r4, r1, #4
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	bfb8      	it	lt
 8002b02:	18e4      	addlt	r4, r4, r3
 8002b04:	f000 f8d0 	bl	8002ca8 <__malloc_lock>
 8002b08:	4a1e      	ldr	r2, [pc, #120]	; (8002b84 <_free_r+0x94>)
 8002b0a:	6813      	ldr	r3, [r2, #0]
 8002b0c:	4610      	mov	r0, r2
 8002b0e:	b933      	cbnz	r3, 8002b1e <_free_r+0x2e>
 8002b10:	6063      	str	r3, [r4, #4]
 8002b12:	6014      	str	r4, [r2, #0]
 8002b14:	4628      	mov	r0, r5
 8002b16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b1a:	f000 b8cb 	b.w	8002cb4 <__malloc_unlock>
 8002b1e:	42a3      	cmp	r3, r4
 8002b20:	d90a      	bls.n	8002b38 <_free_r+0x48>
 8002b22:	6821      	ldr	r1, [r4, #0]
 8002b24:	1862      	adds	r2, r4, r1
 8002b26:	4293      	cmp	r3, r2
 8002b28:	bf01      	itttt	eq
 8002b2a:	681a      	ldreq	r2, [r3, #0]
 8002b2c:	685b      	ldreq	r3, [r3, #4]
 8002b2e:	1852      	addeq	r2, r2, r1
 8002b30:	6022      	streq	r2, [r4, #0]
 8002b32:	6063      	str	r3, [r4, #4]
 8002b34:	6004      	str	r4, [r0, #0]
 8002b36:	e7ed      	b.n	8002b14 <_free_r+0x24>
 8002b38:	461a      	mov	r2, r3
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	b10b      	cbz	r3, 8002b42 <_free_r+0x52>
 8002b3e:	42a3      	cmp	r3, r4
 8002b40:	d9fa      	bls.n	8002b38 <_free_r+0x48>
 8002b42:	6811      	ldr	r1, [r2, #0]
 8002b44:	1850      	adds	r0, r2, r1
 8002b46:	42a0      	cmp	r0, r4
 8002b48:	d10b      	bne.n	8002b62 <_free_r+0x72>
 8002b4a:	6820      	ldr	r0, [r4, #0]
 8002b4c:	4401      	add	r1, r0
 8002b4e:	1850      	adds	r0, r2, r1
 8002b50:	4283      	cmp	r3, r0
 8002b52:	6011      	str	r1, [r2, #0]
 8002b54:	d1de      	bne.n	8002b14 <_free_r+0x24>
 8002b56:	6818      	ldr	r0, [r3, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	4401      	add	r1, r0
 8002b5c:	6011      	str	r1, [r2, #0]
 8002b5e:	6053      	str	r3, [r2, #4]
 8002b60:	e7d8      	b.n	8002b14 <_free_r+0x24>
 8002b62:	d902      	bls.n	8002b6a <_free_r+0x7a>
 8002b64:	230c      	movs	r3, #12
 8002b66:	602b      	str	r3, [r5, #0]
 8002b68:	e7d4      	b.n	8002b14 <_free_r+0x24>
 8002b6a:	6820      	ldr	r0, [r4, #0]
 8002b6c:	1821      	adds	r1, r4, r0
 8002b6e:	428b      	cmp	r3, r1
 8002b70:	bf01      	itttt	eq
 8002b72:	6819      	ldreq	r1, [r3, #0]
 8002b74:	685b      	ldreq	r3, [r3, #4]
 8002b76:	1809      	addeq	r1, r1, r0
 8002b78:	6021      	streq	r1, [r4, #0]
 8002b7a:	6063      	str	r3, [r4, #4]
 8002b7c:	6054      	str	r4, [r2, #4]
 8002b7e:	e7c9      	b.n	8002b14 <_free_r+0x24>
 8002b80:	bd38      	pop	{r3, r4, r5, pc}
 8002b82:	bf00      	nop
 8002b84:	20000090 	.word	0x20000090

08002b88 <_malloc_r>:
 8002b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b8a:	1ccd      	adds	r5, r1, #3
 8002b8c:	f025 0503 	bic.w	r5, r5, #3
 8002b90:	3508      	adds	r5, #8
 8002b92:	2d0c      	cmp	r5, #12
 8002b94:	bf38      	it	cc
 8002b96:	250c      	movcc	r5, #12
 8002b98:	2d00      	cmp	r5, #0
 8002b9a:	4606      	mov	r6, r0
 8002b9c:	db01      	blt.n	8002ba2 <_malloc_r+0x1a>
 8002b9e:	42a9      	cmp	r1, r5
 8002ba0:	d903      	bls.n	8002baa <_malloc_r+0x22>
 8002ba2:	230c      	movs	r3, #12
 8002ba4:	6033      	str	r3, [r6, #0]
 8002ba6:	2000      	movs	r0, #0
 8002ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002baa:	f000 f87d 	bl	8002ca8 <__malloc_lock>
 8002bae:	4921      	ldr	r1, [pc, #132]	; (8002c34 <_malloc_r+0xac>)
 8002bb0:	680a      	ldr	r2, [r1, #0]
 8002bb2:	4614      	mov	r4, r2
 8002bb4:	b99c      	cbnz	r4, 8002bde <_malloc_r+0x56>
 8002bb6:	4f20      	ldr	r7, [pc, #128]	; (8002c38 <_malloc_r+0xb0>)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	b923      	cbnz	r3, 8002bc6 <_malloc_r+0x3e>
 8002bbc:	4621      	mov	r1, r4
 8002bbe:	4630      	mov	r0, r6
 8002bc0:	f000 f862 	bl	8002c88 <_sbrk_r>
 8002bc4:	6038      	str	r0, [r7, #0]
 8002bc6:	4629      	mov	r1, r5
 8002bc8:	4630      	mov	r0, r6
 8002bca:	f000 f85d 	bl	8002c88 <_sbrk_r>
 8002bce:	1c43      	adds	r3, r0, #1
 8002bd0:	d123      	bne.n	8002c1a <_malloc_r+0x92>
 8002bd2:	230c      	movs	r3, #12
 8002bd4:	4630      	mov	r0, r6
 8002bd6:	6033      	str	r3, [r6, #0]
 8002bd8:	f000 f86c 	bl	8002cb4 <__malloc_unlock>
 8002bdc:	e7e3      	b.n	8002ba6 <_malloc_r+0x1e>
 8002bde:	6823      	ldr	r3, [r4, #0]
 8002be0:	1b5b      	subs	r3, r3, r5
 8002be2:	d417      	bmi.n	8002c14 <_malloc_r+0x8c>
 8002be4:	2b0b      	cmp	r3, #11
 8002be6:	d903      	bls.n	8002bf0 <_malloc_r+0x68>
 8002be8:	6023      	str	r3, [r4, #0]
 8002bea:	441c      	add	r4, r3
 8002bec:	6025      	str	r5, [r4, #0]
 8002bee:	e004      	b.n	8002bfa <_malloc_r+0x72>
 8002bf0:	6863      	ldr	r3, [r4, #4]
 8002bf2:	42a2      	cmp	r2, r4
 8002bf4:	bf0c      	ite	eq
 8002bf6:	600b      	streq	r3, [r1, #0]
 8002bf8:	6053      	strne	r3, [r2, #4]
 8002bfa:	4630      	mov	r0, r6
 8002bfc:	f000 f85a 	bl	8002cb4 <__malloc_unlock>
 8002c00:	f104 000b 	add.w	r0, r4, #11
 8002c04:	1d23      	adds	r3, r4, #4
 8002c06:	f020 0007 	bic.w	r0, r0, #7
 8002c0a:	1ac2      	subs	r2, r0, r3
 8002c0c:	d0cc      	beq.n	8002ba8 <_malloc_r+0x20>
 8002c0e:	1a1b      	subs	r3, r3, r0
 8002c10:	50a3      	str	r3, [r4, r2]
 8002c12:	e7c9      	b.n	8002ba8 <_malloc_r+0x20>
 8002c14:	4622      	mov	r2, r4
 8002c16:	6864      	ldr	r4, [r4, #4]
 8002c18:	e7cc      	b.n	8002bb4 <_malloc_r+0x2c>
 8002c1a:	1cc4      	adds	r4, r0, #3
 8002c1c:	f024 0403 	bic.w	r4, r4, #3
 8002c20:	42a0      	cmp	r0, r4
 8002c22:	d0e3      	beq.n	8002bec <_malloc_r+0x64>
 8002c24:	1a21      	subs	r1, r4, r0
 8002c26:	4630      	mov	r0, r6
 8002c28:	f000 f82e 	bl	8002c88 <_sbrk_r>
 8002c2c:	3001      	adds	r0, #1
 8002c2e:	d1dd      	bne.n	8002bec <_malloc_r+0x64>
 8002c30:	e7cf      	b.n	8002bd2 <_malloc_r+0x4a>
 8002c32:	bf00      	nop
 8002c34:	20000090 	.word	0x20000090
 8002c38:	20000094 	.word	0x20000094

08002c3c <_realloc_r>:
 8002c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c3e:	4607      	mov	r7, r0
 8002c40:	4614      	mov	r4, r2
 8002c42:	460e      	mov	r6, r1
 8002c44:	b921      	cbnz	r1, 8002c50 <_realloc_r+0x14>
 8002c46:	4611      	mov	r1, r2
 8002c48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002c4c:	f7ff bf9c 	b.w	8002b88 <_malloc_r>
 8002c50:	b922      	cbnz	r2, 8002c5c <_realloc_r+0x20>
 8002c52:	f7ff ff4d 	bl	8002af0 <_free_r>
 8002c56:	4625      	mov	r5, r4
 8002c58:	4628      	mov	r0, r5
 8002c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c5c:	f000 f830 	bl	8002cc0 <_malloc_usable_size_r>
 8002c60:	42a0      	cmp	r0, r4
 8002c62:	d20f      	bcs.n	8002c84 <_realloc_r+0x48>
 8002c64:	4621      	mov	r1, r4
 8002c66:	4638      	mov	r0, r7
 8002c68:	f7ff ff8e 	bl	8002b88 <_malloc_r>
 8002c6c:	4605      	mov	r5, r0
 8002c6e:	2800      	cmp	r0, #0
 8002c70:	d0f2      	beq.n	8002c58 <_realloc_r+0x1c>
 8002c72:	4631      	mov	r1, r6
 8002c74:	4622      	mov	r2, r4
 8002c76:	f7ff ff13 	bl	8002aa0 <memcpy>
 8002c7a:	4631      	mov	r1, r6
 8002c7c:	4638      	mov	r0, r7
 8002c7e:	f7ff ff37 	bl	8002af0 <_free_r>
 8002c82:	e7e9      	b.n	8002c58 <_realloc_r+0x1c>
 8002c84:	4635      	mov	r5, r6
 8002c86:	e7e7      	b.n	8002c58 <_realloc_r+0x1c>

08002c88 <_sbrk_r>:
 8002c88:	b538      	push	{r3, r4, r5, lr}
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	4d05      	ldr	r5, [pc, #20]	; (8002ca4 <_sbrk_r+0x1c>)
 8002c8e:	4604      	mov	r4, r0
 8002c90:	4608      	mov	r0, r1
 8002c92:	602b      	str	r3, [r5, #0]
 8002c94:	f7fd fdda 	bl	800084c <_sbrk>
 8002c98:	1c43      	adds	r3, r0, #1
 8002c9a:	d102      	bne.n	8002ca2 <_sbrk_r+0x1a>
 8002c9c:	682b      	ldr	r3, [r5, #0]
 8002c9e:	b103      	cbz	r3, 8002ca2 <_sbrk_r+0x1a>
 8002ca0:	6023      	str	r3, [r4, #0]
 8002ca2:	bd38      	pop	{r3, r4, r5, pc}
 8002ca4:	20000450 	.word	0x20000450

08002ca8 <__malloc_lock>:
 8002ca8:	4801      	ldr	r0, [pc, #4]	; (8002cb0 <__malloc_lock+0x8>)
 8002caa:	f000 b811 	b.w	8002cd0 <__retarget_lock_acquire_recursive>
 8002cae:	bf00      	nop
 8002cb0:	20000458 	.word	0x20000458

08002cb4 <__malloc_unlock>:
 8002cb4:	4801      	ldr	r0, [pc, #4]	; (8002cbc <__malloc_unlock+0x8>)
 8002cb6:	f000 b80c 	b.w	8002cd2 <__retarget_lock_release_recursive>
 8002cba:	bf00      	nop
 8002cbc:	20000458 	.word	0x20000458

08002cc0 <_malloc_usable_size_r>:
 8002cc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002cc4:	1f18      	subs	r0, r3, #4
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	bfbc      	itt	lt
 8002cca:	580b      	ldrlt	r3, [r1, r0]
 8002ccc:	18c0      	addlt	r0, r0, r3
 8002cce:	4770      	bx	lr

08002cd0 <__retarget_lock_acquire_recursive>:
 8002cd0:	4770      	bx	lr

08002cd2 <__retarget_lock_release_recursive>:
 8002cd2:	4770      	bx	lr

08002cd4 <_init>:
 8002cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cd6:	bf00      	nop
 8002cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cda:	bc08      	pop	{r3}
 8002cdc:	469e      	mov	lr, r3
 8002cde:	4770      	bx	lr

08002ce0 <_fini>:
 8002ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ce2:	bf00      	nop
 8002ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ce6:	bc08      	pop	{r3}
 8002ce8:	469e      	mov	lr, r3
 8002cea:	4770      	bx	lr
